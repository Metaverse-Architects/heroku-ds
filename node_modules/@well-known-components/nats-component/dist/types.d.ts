import { IConfigComponent, ILoggerComponent } from "@well-known-components/interfaces";
import { Emitter } from "mitt";
export declare namespace natsComponent {
    type NeededComponents = {
        logs: ILoggerComponent;
        config: IConfigComponent;
    };
}
export declare type NatsMsg = {
    subject: string;
    data: Uint8Array;
};
/**
 * A Nats subscription
 * @public
 */
export declare type Subscription = {
    unsubscribe: () => void;
};
/**
 * Subscription Callback
 * @public
 */
export declare type SubscriptionCallback = (error: Error | null, msg: NatsMsg) => void;
export declare type NatsEvents = {
    connected: void;
};
export declare type INatsComponent = {
    publish(topic: string, message?: Uint8Array): void;
    subscribe(topic: string, cb: SubscriptionCallback): Subscription;
    start(): Promise<void>;
    stop(): Promise<void>;
    events: Emitter<NatsEvents>;
};
//# sourceMappingURL=types.d.ts.map