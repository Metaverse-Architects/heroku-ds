// package: 
// file: index.proto

import * as jspb from "google-protobuf";

export class RpcMessageHeader extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RpcMessageHeader.AsObject;
  static toObject(includeInstance: boolean, msg: RpcMessageHeader): RpcMessageHeader.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RpcMessageHeader, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RpcMessageHeader;
  static deserializeBinaryFromReader(message: RpcMessageHeader, reader: jspb.BinaryReader): RpcMessageHeader;
}

export namespace RpcMessageHeader {
  export type AsObject = {
    messageType: number,
    messageId: number,
  }
}

export class CreatePort extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortName(): string;
  setPortName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePort.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePort): CreatePort.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePort, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePort;
  static deserializeBinaryFromReader(message: CreatePort, reader: jspb.BinaryReader): CreatePort;
}

export namespace CreatePort {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portName: string,
  }
}

export class CreatePortResponse extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePortResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePortResponse): CreatePortResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePortResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePortResponse;
  static deserializeBinaryFromReader(message: CreatePortResponse, reader: jspb.BinaryReader): CreatePortResponse;
}

export namespace CreatePortResponse {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
  }
}

export class RequestModule extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  getModuleName(): string;
  setModuleName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestModule.AsObject;
  static toObject(includeInstance: boolean, msg: RequestModule): RequestModule.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestModule, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestModule;
  static deserializeBinaryFromReader(message: RequestModule, reader: jspb.BinaryReader): RequestModule;
}

export namespace RequestModule {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
    moduleName: string,
  }
}

export class DestroyPort extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DestroyPort.AsObject;
  static toObject(includeInstance: boolean, msg: DestroyPort): DestroyPort.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DestroyPort, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DestroyPort;
  static deserializeBinaryFromReader(message: DestroyPort, reader: jspb.BinaryReader): DestroyPort;
}

export namespace DestroyPort {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
  }
}

export class RequestModuleResponse extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  clearProceduresList(): void;
  getProceduresList(): Array<ModuleProcedure>;
  setProceduresList(value: Array<ModuleProcedure>): void;
  addProcedures(value?: ModuleProcedure, index?: number): ModuleProcedure;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestModuleResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RequestModuleResponse): RequestModuleResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestModuleResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestModuleResponse;
  static deserializeBinaryFromReader(message: RequestModuleResponse, reader: jspb.BinaryReader): RequestModuleResponse;
}

export namespace RequestModuleResponse {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
    proceduresList: Array<ModuleProcedure.AsObject>,
  }
}

export class ModuleProcedure extends jspb.Message {
  getProcedureId(): number;
  setProcedureId(value: number): void;

  getProcedureName(): string;
  setProcedureName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ModuleProcedure.AsObject;
  static toObject(includeInstance: boolean, msg: ModuleProcedure): ModuleProcedure.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ModuleProcedure, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ModuleProcedure;
  static deserializeBinaryFromReader(message: ModuleProcedure, reader: jspb.BinaryReader): ModuleProcedure;
}

export namespace ModuleProcedure {
  export type AsObject = {
    procedureId: number,
    procedureName: string,
  }
}

export class Request extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  getProcedureId(): number;
  setProcedureId(value: number): void;

  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Request.AsObject;
  static toObject(includeInstance: boolean, msg: Request): Request.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Request, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Request;
  static deserializeBinaryFromReader(message: Request, reader: jspb.BinaryReader): Request;
}

export namespace Request {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
    procedureId: number,
    payload: Uint8Array | string,
  }
}

export class RemoteError extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getErrorCode(): number;
  setErrorCode(value: number): void;

  getErrorMessage(): string;
  setErrorMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemoteError.AsObject;
  static toObject(includeInstance: boolean, msg: RemoteError): RemoteError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RemoteError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemoteError;
  static deserializeBinaryFromReader(message: RemoteError, reader: jspb.BinaryReader): RemoteError;
}

export namespace RemoteError {
  export type AsObject = {
    messageType: number,
    messageId: number,
    errorCode: number,
    errorMessage: string,
  }
}

export class Response extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Response.AsObject;
  static toObject(includeInstance: boolean, msg: Response): Response.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Response, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Response;
  static deserializeBinaryFromReader(message: Response, reader: jspb.BinaryReader): Response;
}

export namespace Response {
  export type AsObject = {
    messageType: number,
    messageId: number,
    payload: Uint8Array | string,
  }
}

export class StreamMessage extends jspb.Message {
  getMessageType(): number;
  setMessageType(value: number): void;

  getMessageId(): number;
  setMessageId(value: number): void;

  getPortId(): number;
  setPortId(value: number): void;

  getSequenceId(): number;
  setSequenceId(value: number): void;

  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  getClosed(): boolean;
  setClosed(value: boolean): void;

  getAck(): boolean;
  setAck(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StreamMessage.AsObject;
  static toObject(includeInstance: boolean, msg: StreamMessage): StreamMessage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StreamMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StreamMessage;
  static deserializeBinaryFromReader(message: StreamMessage, reader: jspb.BinaryReader): StreamMessage;
}

export namespace StreamMessage {
  export type AsObject = {
    messageType: number,
    messageId: number,
    portId: number,
    sequenceId: number,
    payload: Uint8Array | string,
    closed: boolean,
    ack: boolean,
  }
}

export interface RpcMessageTypesMap {
  RPCMESSAGETYPES_EMPTY: 0;
  RPCMESSAGETYPES_REQUEST: 1;
  RPCMESSAGETYPES_RESPONSE: 2;
  RPCMESSAGETYPES_STREAM_MESSAGE: 3;
  RPCMESSAGETYPES_STREAM_ACK: 4;
  RPCMESSAGETYPES_CREATE_PORT: 5;
  RPCMESSAGETYPES_CREATE_PORT_RESPONSE: 6;
  RPCMESSAGETYPES_REQUEST_MODULE: 7;
  RPCMESSAGETYPES_REQUEST_MODULE_RESPONSE: 8;
  RPCMESSAGETYPES_REMOTE_ERROR_RESPONSE: 9;
  RPCMESSAGETYPES_DESTROY_PORT: 10;
  RPCMESSAGETYPES_SERVER_READY: 100;
}

export const RpcMessageTypes: RpcMessageTypesMap;

