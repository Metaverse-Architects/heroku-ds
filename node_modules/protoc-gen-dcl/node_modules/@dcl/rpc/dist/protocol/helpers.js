"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseProtocolMessage = exports.getMessageId = exports.getMessageType = exports.streamAckMessage = exports.streamMessage = exports.closeStreamMessage = void 0;
const index_pb_1 = require("./index_pb");
function closeStreamMessage(messageId, sequenceId, portId) {
    const m = new index_pb_1.StreamMessage();
    m.setMessageType(index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_MESSAGE);
    m.setMessageId(messageId);
    m.setSequenceId(sequenceId);
    m.setPortId(portId);
    m.setAck(false);
    m.setClosed(true);
    return m.serializeBinary();
}
exports.closeStreamMessage = closeStreamMessage;
function streamMessage(messageId, sequenceId, portId, payload) {
    const m = new index_pb_1.StreamMessage();
    m.setMessageType(index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_MESSAGE);
    m.setMessageId(messageId);
    m.setSequenceId(sequenceId);
    m.setPortId(portId);
    m.setAck(false);
    m.setClosed(false);
    m.setPayload(payload);
    return m.serializeBinary();
}
exports.streamMessage = streamMessage;
function streamAckMessage(messageId, sequenceId, portId) {
    const m = new index_pb_1.StreamMessage();
    m.setMessageType(index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_ACK);
    m.setMessageId(messageId);
    m.setSequenceId(sequenceId);
    m.setPortId(portId);
    m.setAck(true);
    m.setClosed(false);
    return m.serializeBinary();
}
exports.streamAckMessage = streamAckMessage;
function getMessageType(reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            return null;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1 /* message_type */:
                var value = /** @type {number} */ reader.readInt32();
                return value;
            default:
                reader.skipField();
                break;
        }
    }
    return null;
}
exports.getMessageType = getMessageType;
function getMessageId(reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            return null;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2 /* message_id */:
                var value = /** @type {number} */ reader.readInt32();
                return value;
            default:
                reader.skipField();
                break;
        }
    }
    return null;
}
exports.getMessageId = getMessageId;
function parseProtocolMessage(reader) {
    const messageType = getMessageType(reader);
    reader.reset();
    switch (messageType) {
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_CREATE_PORT_RESPONSE:
            return index_pb_1.CreatePortResponse.deserializeBinaryFromReader(new index_pb_1.CreatePortResponse(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_RESPONSE:
            return index_pb_1.Response.deserializeBinaryFromReader(new index_pb_1.Response(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_REQUEST_MODULE_RESPONSE:
            return index_pb_1.RequestModuleResponse.deserializeBinaryFromReader(new index_pb_1.RequestModuleResponse(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_MESSAGE:
            return index_pb_1.StreamMessage.deserializeBinaryFromReader(new index_pb_1.StreamMessage(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_SERVER_READY:
            return null;
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_REMOTE_ERROR_RESPONSE:
            return index_pb_1.RemoteError.deserializeBinaryFromReader(new index_pb_1.RemoteError(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_REQUEST:
            return index_pb_1.Request.deserializeBinaryFromReader(new index_pb_1.Request(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_CREATE_PORT:
            return index_pb_1.CreatePort.deserializeBinaryFromReader(new index_pb_1.CreatePort(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_ACK:
            return index_pb_1.StreamMessage.deserializeBinaryFromReader(new index_pb_1.StreamMessage(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_REQUEST_MODULE:
            return index_pb_1.RequestModule.deserializeBinaryFromReader(new index_pb_1.RequestModule(), reader);
        case index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_DESTROY_PORT:
            return index_pb_1.DestroyPort.deserializeBinaryFromReader(new index_pb_1.DestroyPort(), reader);
    }
    debugger;
    return null;
}
exports.parseProtocolMessage = parseProtocolMessage;
//# sourceMappingURL=helpers.js.map