"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageNumberHandler = void 0;
const google_protobuf_1 = require("google-protobuf");
const helpers_1 = require("./protocol/helpers");
let globalMessageNumber = 0;
function messageNumberHandler(transport) {
    const oneTimeCallbacks = new Map();
    const listeners = new Map();
    transport.on("message", (message) => {
        const reader = new google_protobuf_1.BinaryReader(message);
        const messageId = (0, helpers_1.getMessageId)(reader);
        if (messageId !== null) {
            const fut = oneTimeCallbacks.get(messageId);
            if (fut) {
                reader.reset();
                fut(reader);
                oneTimeCallbacks.delete(messageId);
            }
            const handler = listeners.get(messageId);
            if (handler) {
                handler(new google_protobuf_1.BinaryReader(message));
            }
        }
    });
    return {
        transport,
        addListener(messageId, handler) {
            if (listeners.has(messageId))
                throw new Error("There is already a handler for messageId " + messageId);
            listeners.set(messageId, handler);
        },
        removeListener(messageId) {
            if (!listeners.has(messageId))
                throw new Error("A handler is missing for messageId " + messageId);
            listeners.delete(messageId);
        },
        async request(data) {
            const messageId = ++globalMessageNumber;
            return new Promise((resolve) => {
                data.setMessageId(messageId);
                oneTimeCallbacks.set(messageId, resolve);
                transport.sendMessage(data.serializeBinary());
            });
        },
    };
}
exports.messageNumberHandler = messageNumberHandler;
//# sourceMappingURL=message-number-handler.js.map