"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAckHelper = void 0;
const google_protobuf_1 = require("google-protobuf");
const index_pb_1 = require("./protocol/index_pb");
const helpers_1 = require("./protocol/helpers");
function createAckHelper(transport) {
    const oneTimeCallbacks = new Map();
    transport.on("message", (message) => {
        const reader = new google_protobuf_1.BinaryReader(message);
        const messageType = (0, helpers_1.getMessageType)(reader);
        if (messageType == index_pb_1.RpcMessageTypes.RPCMESSAGETYPES_STREAM_ACK) {
            reader.reset();
            const data = index_pb_1.StreamMessage.deserializeBinaryFromReader(new index_pb_1.StreamMessage(), reader);
            const key = `${data.getMessageId()},${data.getSequenceId()}`;
            const fut = oneTimeCallbacks.get(key);
            if (fut) {
                fut(data);
                oneTimeCallbacks.delete(key);
            }
        }
    });
    return {
        transport,
        async sendWithAck(data) {
            return new Promise((ret) => {
                oneTimeCallbacks.set(`${data.getMessageId()},${data.getSequenceId()}`, ret);
                transport.sendMessage(data.serializeBinary());
            });
        },
    };
}
exports.createAckHelper = createAckHelper;
//# sourceMappingURL=ack-helper.js.map