#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fileDescriptorTSD_1 = require("ts-protoc-gen/lib/ts/fileDescriptorTSD");
const ExportMap_1 = require("ts-protoc-gen/lib/ExportMap");
const util_1 = require("ts-protoc-gen/lib/util");
const plugin_pb_1 = require("google-protobuf/google/protobuf/compiler/plugin_pb");
const client_1 = require("./codegen/client");
const server_1 = require("./codegen/server");
/**
 * This is the ProtoC compiler plugin.
 *
 * The Protocol Buffers Compiler can be extended to [support new languages via plugins](https://developers.google.com/protocol-buffers/docs/reference/other).
 * A plugin is just a program which reads a CodeGeneratorRequest protocol buffer from standard input
 * and then writes a CodeGeneratorResponse protocol buffer to standard output.
 * These message types are defined in [plugin.proto](https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto).
 *
 */
(0, util_1.withAllStdIn)((inputBuff) => {
    try {
        const typedInputBuff = new Uint8Array(inputBuff.length);
        typedInputBuff.set(inputBuff);
        const codeGenRequest = plugin_pb_1.CodeGeneratorRequest.deserializeBinary(typedInputBuff);
        const codeGenResponse = new plugin_pb_1.CodeGeneratorResponse();
        codeGenResponse.setSupportedFeatures(plugin_pb_1.CodeGeneratorResponse.Feature.FEATURE_PROTO3_OPTIONAL);
        const exportMap = new ExportMap_1.ExportMap();
        const fileNameToDescriptor = {};
        // const parameter = codeGenRequest.getParameter()
        codeGenRequest.getProtoFileList().forEach((protoFileDescriptor) => {
            const fileDescriptorName = protoFileDescriptor.getName() || (0, util_1.throwError)("Missing file descriptor name");
            fileNameToDescriptor[fileDescriptorName] = protoFileDescriptor;
            exportMap.addFileDescriptor(protoFileDescriptor);
        });
        codeGenRequest.getFileToGenerateList().forEach((fileName) => {
            const outputFileName = (0, util_1.replaceProtoSuffix)(fileName);
            const thisFile = new plugin_pb_1.CodeGeneratorResponse.File();
            thisFile.setName(outputFileName + ".d.ts");
            thisFile.setContent((0, fileDescriptorTSD_1.printFileDescriptorTSD)(fileNameToDescriptor[fileName], exportMap));
            codeGenResponse.addFile(thisFile);
            (0, client_1.generateDclRpcService)(outputFileName, fileNameToDescriptor[fileName], exportMap).forEach((file) => codeGenResponse.addFile(file));
            (0, server_1.generateServerRpcService)(outputFileName, fileNameToDescriptor[fileName], exportMap).forEach((file) => codeGenResponse.addFile(file));
        });
        process.stdout.write(Buffer.from(codeGenResponse.serializeBinary().buffer));
    }
    catch (err) {
        console.error("protoc-gen-ts error: " + err.stack + "\n");
        process.exit(1);
    }
});
//# sourceMappingURL=bin.js.map