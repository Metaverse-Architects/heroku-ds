"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDclRpcService = void 0;
const Printer_1 = require("ts-protoc-gen/lib/Printer");
const common_1 = require("ts-protoc-gen/lib/service/common");
const shared_1 = require("./shared");
function generateDclRpcService(filename, descriptor, exportMap) {
    return [(0, common_1.createFile)(generateClientTypeScriptDefinition(descriptor, exportMap), `${filename}_client.ts`)];
}
exports.generateDclRpcService = generateDclRpcService;
function generateClientTypeScriptDefinition(fileDescriptor, exportMap) {
    const serviceDescriptor = new common_1.GrpcServiceDescriptor(fileDescriptor, exportMap);
    const printer = new Printer_1.Printer(0);
    // Header.
    printer.printLn(`// package: ${serviceDescriptor.packageName}`);
    printer.printLn(`// file: ${serviceDescriptor.filename}`);
    printer.printEmptyLn();
    if (serviceDescriptor.services.length === 0) {
        return printer.getOutput();
    }
    // Import statements.
    serviceDescriptor.imports.forEach((importDescriptor) => {
        printer.printLn(`import * as ${importDescriptor.namespace} from "${importDescriptor.path}";`);
    });
    printer.printLn(`import { RpcClientPort } from "@dcl/rpc";`);
    printer.printLn(`import * as codegen from "@dcl/rpc/dist/codegen";`);
    printer.printEmptyLn();
    // Services.
    serviceDescriptor.services.forEach((service) => {
        (0, shared_1.printRpcDescriptor)(service, printer);
        printer.printLn(`export function load${service.name}(port: RpcClientPort): ${service.name} {`);
        printer.printLn(`  const portFuture = port.loadModule(${JSON.stringify(service.name)});`);
        printer.printLn(`  return {`);
        service.methods.forEach((method) => {
            let fun = method.responseStream ? "codegen.clientProcedureStream" : "codegen.clientProcedureUnary";
            printer.printIndentedLn(`  ${JSON.stringify(method.nameAsPascalCase)}: ${fun}(portFuture, ${JSON.stringify(method.nameAsPascalCase)}, ${method.requestType}, ${method.responseType}),`);
        });
        printer.printLn(`  }`);
        printer.printLn(`}`);
        printer.printEmptyLn();
    });
    return printer.getOutput();
}
//# sourceMappingURL=client.js.map