"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateServerRpcService = void 0;
const Printer_1 = require("ts-protoc-gen/lib/Printer");
const common_1 = require("ts-protoc-gen/lib/service/common");
const shared_1 = require("./shared");
function generateServerRpcService(filename, descriptor, exportMap) {
    return [(0, common_1.createFile)(generateServerTypeScriptDefinition(descriptor, exportMap), `${filename}_server.ts`)];
}
exports.generateServerRpcService = generateServerRpcService;
function generateServerTypeScriptDefinition(fileDescriptor, exportMap) {
    const serviceDescriptor = new common_1.GrpcServiceDescriptor(fileDescriptor, exportMap);
    const printer = new Printer_1.Printer(0);
    // Header.
    printer.printLn(`// AUTOGENERATED, DO NOT EDIT`);
    printer.printLn(`// Type definitions for server implementations of ports.`);
    printer.printLn(`// package: ${serviceDescriptor.packageName}`);
    printer.printLn(`// file: ${serviceDescriptor.filename}`);
    printer.printEmptyLn();
    if (serviceDescriptor.services.length === 0) {
        return printer.getOutput();
    }
    // Import statements.
    serviceDescriptor.imports.forEach((importDescriptor) => {
        printer.printLn(`import * as ${importDescriptor.namespace} from "${importDescriptor.path}";`);
    });
    printer.printLn(`import { RpcServerPort } from "@dcl/rpc";`);
    printer.printLn(`import * as codegen from "@dcl/rpc/dist/codegen";`);
    printer.printEmptyLn();
    // Services.
    serviceDescriptor.services.forEach((service) => {
        (0, shared_1.printRpcDescriptor)(service, printer);
        printer.printLn(`export type ${service.name}ModuleInitializator = (port: RpcServerPort) => Promise<${service.name}> | ${service.name}`);
        printer.printEmptyLn();
        printer.printLn(`export function register${service.name}(port: RpcServerPort, moduleInitializator: ${service.name}ModuleInitializator): void {`);
        printer.printLn(`  port.registerModule("BookService", async port => {`);
        printer.printLn(`    const mod = await moduleInitializator(port);`);
        printer.printLn(`    return {`);
        service.methods.forEach((method) => {
            let fun = method.responseStream ? "codegen.serverProcedureStream" : "codegen.serverProcedureUnary";
            printer.printIndentedLn(`    ${JSON.stringify(method.nameAsPascalCase)}: ${fun}(mod[${JSON.stringify(method.nameAsPascalCase)}].bind(mod), ${JSON.stringify(method.nameAsPascalCase)}, ${method.requestType}, ${method.responseType}),`);
        });
        printer.printLn(`    }`);
        printer.printLn(`  })`);
        printer.printLn(`}`);
        printer.printEmptyLn();
    });
    return printer.getOutput();
}
//# sourceMappingURL=server.js.map