{"version":3,"sources":["modules/land/actions.ts","modules/land/reducer.ts","modules/signature/actions.ts","modules/signature/reducer.ts","modules/authorization/actions.ts","modules/authorization/reducer.ts","modules/server/actions.ts","modules/server/reducer.ts","reducer.ts","contracts.ts","modules/server/selectors.ts","modules/land/sagas.ts","modules/land/utils.ts","config/index.ts","modules/wallet/sagas.ts","modules/server/utils.ts","modules/signature/sagas.ts","modules/authorization/utils.ts","modules/authorization/sagas.ts","modules/server/sagas.ts","modules/translation/sagas.ts","modules/signature/selectors.ts","components/Error.tsx","components/RenderWalletData/RenderWalletData.tsx","components/IdentityPage/IdentityPage.container.tsx","components/Files/Files.tsx","components/IdentityPage/index.ts","components/IdentityPage/IdentityPage.tsx","modules/land/selectors.ts","modules/authorization/selectors.ts","components/Files/Files.container.tsx","components/Files/index.ts","components/Map/index.tsx","components/DeploySuccess/DeploySuccess.container.tsx","components/LinkerPage/LinkerPage.tsx","components/DeploySuccess/DeploySuccess.tsx","components/LinkerPage/LinkerPage.container.tsx","components/LinkerPage/index.ts","components/Root.tsx","index.tsx","store.ts","sagas.ts"],"names":["FETCH_LAND_REQUEST","FETCH_LAND_SUCCESS","FETCH_LAND_FAILURE","fetchLandSuccess","land","action","INITIAL_STATE","data","loading","error","SIGN_CONTENT_REQUEST","SIGN_CONTENT_SUCCESS","SIGN_CONTENT_FAILURE","signContentFailure","CREATE_IDENTITY_REQUEST","CREATE_IDENTITY_SUCCESS","CREATE_IDENTITY_FAILURE","createIdentitySuccess","identity","FETCH_AUTHORIZATIONS_REQUEST","FETCH_AUTHORIZATIONS_SUCCESS","FETCH_AUTHORIZATIONS_FAILURE","fetchAuthorizationsSuccess","authorizations","fetchAuthorizationsFailure","FETCH_FILES_REQUEST","FETCH_FILES_SUCCESS","FETCH_FILES_FAILURE","FETCH_INFO_REQUEST","FETCH_INFO_SUCCESS","FETCH_INFO_FAILURE","FETCH_CATALYST_REQUEST","FETCH_CATALYST_SUCCESS","FETCH_CATALYST_FAILURE","fetchFilesSuccess","files","fetchInfoSuccess","info","fetchInfoFailure","fetchCatalystRequest","undefined","catalyst","parseCoords","query","map","c","split","x","y","parseInt","ContractName","rootReducer","storageReducerWrapper","combineReducers","storage","wallet","transaction","translation","state","type","loadingReducer","payload","signature","authorization","api","catalysts","length","baseParcel","parcels","rootCID","contractsByChainId","LANDRegistry","ChainId","ETHEREUM_MAINNET","address","abi","ETHEREUM_GOERLI","EstateRegistry","getProvider","getConnectedProvider","provider","Error","Web3Provider","getContract","name","chainId","contract","getContractByName","getNetwork","getLandContract","landRegistry","Contract","getEstateContract","estateRegistry","getFiles","getInfo","landSaga","handleFetchLandRequest","handleConnectWalletSuccess","takeEvery","CONNECT_WALLET_SUCCESS","select","call","decodeLandData","version","description","put","message","charAt","CSV","cellDelimiter","ipns","config","createConfig","dev","prod","walletSaga","fullWalletSaga","handleWallet","baseWalletSaga","createWalletSaga","CHAIN_ID","get","toString","all","CHANGE_NETWORK","CHANGE_ACCOUNT","window","location","reload","closeServer","ok","fetch","JSON","stringify","postDeploy","method","headers","body","getFilesRequest","json","getInfoRequest","getCatalystsPointer","signatureSaga","handleSignContentRequest","handleSignContentSuccess","handleCreateIdentityRequest","handleCreateIdentitySuccess","takeLatest","dataToSign","toUtf8Bytes","web3provider","signer","getSigner","getAddress","addr","send","hexlify","toLowerCase","signedMessage","getChainId","_action","createIdentity","responseType","isAuthorized","unlockRegeneratorRuntime","encodeTokenId","landTokenId","isUpdateAuthorized","estate","getLandEstateId","estateTokenId","m","n","authorizationSaga","handleFetchAuthorizationsRequest","take","qs","URLSearchParams","document","search","promises","parcel","Promise","owner","apiSaga","handleFetchFilesRequest","handleFetchInfoRequest","handleFetchCatalystRequest","value","translationSaga","createTranslationSaga","translations","getState","getData","createSelector","isLoading","React","memo","children","style","color","RenderWalletData","isConnected","isConnecting","onConnectWallet","scale","seed","tooltip","strong","filter","a","coordsToString","join","primary","onClick","disabled","Filter","IdentityPage","connect","getWallet","signed","getSignature","isSigning","isSigningTx","dispatch","providerType","enableWalletRequest","onRequestIdentity","props","useState","isModalOpen","setIsModalOpen","useEffect","className","e","preventDefault","open","onClose","onConnect","getError","every","Files","Size","setFilter","useMemo","sort","b","size","basic","Header","Row","HeaderCell","text","direction","Menu","Object","values","f","Item","Body","index","Cell","Number","toFixed","LinkScenePage","find","coords","s","height","isDraggable","layers","Tab","status","onFetchCatalyst","entityIds","Set","entityId","deployedToAll","interval","setInterval","clearInterval","Color","SUNISH","url","timestamp","Date","toLocaleString","LinkerPage","base","getLand","isLandLoading","getLandError","getAuthorizations","isAuthorizationLoading","onSignContent","cid","signContentRequest","onFetchFiles","onFetchInfo","Map","tab","setTab","isTestNet","deployUrl","leftMenu","Left","textAlign","title","focus","SUMMER_RED","SHADOWS","Right","ToastType","ERROR","isFullscreen","t","active","Root","has","ReactDOM","render","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStorageMiddleware","storageKey","storageMiddleware","loadStorageMiddleware","sagasMiddleware","createSagasMiddleware","transactionMiddleware","createTransactionMiddleware","loggerMiddleware","createLogger","collapsed","predicate","_","enhancer","applyMiddleware","createStore","run","initStore","locales","keys","getElementById"],"mappings":"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","file":"static/js/main.4485ec52.chunk.js","sourcesContent":["import { action } from 'typesafe-actions'\nimport { LANDMeta } from './types'\n\nexport const FETCH_LAND_REQUEST = '[Request] Fetch LAND'\nexport const FETCH_LAND_SUCCESS = '[Success] Fetch LAND'\nexport const FETCH_LAND_FAILURE = '[Failure] Fetch LAND'\n\nexport const fetchLandRequest = () => action(FETCH_LAND_REQUEST)\nexport const fetchLandSuccess = (land: LANDMeta) => action(FETCH_LAND_SUCCESS, { land })\nexport const fetchLandFailure = (error: string) => action(FETCH_LAND_FAILURE, { error })\n\nexport type FetchLandRequestAction = ReturnType<typeof fetchLandRequest>\nexport type FetchLandSuccessAction = ReturnType<typeof fetchLandSuccess>\nexport type FetchLandFailureAction = ReturnType<typeof fetchLandFailure>\n","import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  FetchLandRequestAction,\n  FetchLandSuccessAction,\n  FetchLandFailureAction,\n  FETCH_LAND_REQUEST,\n  FETCH_LAND_FAILURE,\n  FETCH_LAND_SUCCESS\n} from './actions'\n\nexport type LandState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: LandState = {\n  data: {},\n  loading: [],\n  error: null\n}\n\nexport type LandReducerAction = FetchLandRequestAction | FetchLandSuccessAction | FetchLandFailureAction\n\nexport const landReducer = (state = INITIAL_STATE, action: LandReducerAction): LandState => {\n  switch (action.type) {\n    case FETCH_LAND_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_LAND_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.land,\n        error: null\n      }\n    case FETCH_LAND_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { AuthIdentity } from 'dcl-crypto'\nimport { action } from 'typesafe-actions'\n\nexport const SIGN_CONTENT_REQUEST = '[Request] Sign Content'\nexport const SIGN_CONTENT_SUCCESS = '[Success] Sign Content'\nexport const SIGN_CONTENT_FAILURE = '[Failure] Sign Content'\n\nexport const signContentRequest = (cid: string) => action(SIGN_CONTENT_REQUEST, cid)\nexport const signContentSuccess = (signature: string) => action(SIGN_CONTENT_SUCCESS, { signature })\nexport const signContentFailure = (error: string) => action(SIGN_CONTENT_FAILURE, { error })\n\nexport type SignContentRequestAction = ReturnType<typeof signContentRequest>\nexport type SignContentSuccessAction = ReturnType<typeof signContentSuccess>\nexport type SignContentFailureAction = ReturnType<typeof signContentFailure>\n\nexport const CREATE_IDENTITY_REQUEST = '[Request] Create Identity'\nexport const CREATE_IDENTITY_SUCCESS = '[Success] Create Identity'\nexport const CREATE_IDENTITY_FAILURE = '[Failure] Create Identity'\n\nexport const createIdentityRequest = () => action(CREATE_IDENTITY_REQUEST, {})\nexport const createIdentitySuccess = (identity: AuthIdentity) => action(CREATE_IDENTITY_SUCCESS, { identity })\nexport const createIdentityFailure = (error: string) => action(CREATE_IDENTITY_FAILURE, { error })\n\nexport type CreateIdentityRequestAction = ReturnType<typeof createIdentityRequest>\nexport type CreateIdentitySuccessAction = ReturnType<typeof createIdentitySuccess>\nexport type CreateIdentityFailureAction = ReturnType<typeof createIdentityFailure>\n","import { AuthIdentity } from 'dcl-crypto'\nimport { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  SignContentRequestAction,\n  SignContentSuccessAction,\n  SignContentFailureAction,\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SIGN_CONTENT_FAILURE,\n  CreateIdentityRequestAction,\n  CreateIdentitySuccessAction,\n  CreateIdentityFailureAction,\n  CREATE_IDENTITY_REQUEST,\n  CREATE_IDENTITY_SUCCESS,\n  CREATE_IDENTITY_FAILURE\n} from './actions'\n\nexport type SignatureState = {\n  data: any\n  identity: AuthIdentity | null\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: SignatureState = {\n  data: '',\n  loading: [],\n  identity: null,\n  error: null\n}\n\nexport type SignatureReducerAction =\n  | SignContentRequestAction\n  | SignContentSuccessAction\n  | SignContentFailureAction\n  | CreateIdentityRequestAction\n  | CreateIdentitySuccessAction\n  | CreateIdentityFailureAction\n\nexport const signatureReducer = (state = INITIAL_STATE, action: SignatureReducerAction): SignatureState => {\n  switch (action.type) {\n    case SIGN_CONTENT_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case SIGN_CONTENT_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.signature,\n        error: null\n      }\n    case SIGN_CONTENT_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    case CREATE_IDENTITY_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case CREATE_IDENTITY_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        identity: action.payload.identity,\n        error: null\n      }\n    case CREATE_IDENTITY_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { Authorization } from './types'\n\nexport const FETCH_AUTHORIZATIONS_REQUEST = '[Request] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_SUCCESS = '[Success] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_FAILURE = '[Failure] Fetch LAND Authorizations'\n\nexport const fetchAuthorizationsRequest = (owner: string) => action(FETCH_AUTHORIZATIONS_REQUEST, { owner })\n\nexport const fetchAuthorizationsSuccess = (authorizations: Authorization[]) =>\n  action(FETCH_AUTHORIZATIONS_SUCCESS, { authorizations })\n\nexport const fetchAuthorizationsFailure = (error: string) => action(FETCH_AUTHORIZATIONS_FAILURE, { error })\n\nexport type FetchAuthorizationsRequestAction = ReturnType<typeof fetchAuthorizationsRequest>\nexport type FetchAuthorizationsSuccessAction = ReturnType<typeof fetchAuthorizationsSuccess>\nexport type FetchAuthorizationsFailureAction = ReturnType<typeof fetchAuthorizationsFailure>\n","import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  FetchAuthorizationsRequestAction,\n  FetchAuthorizationsSuccessAction,\n  FetchAuthorizationsFailureAction,\n  FETCH_AUTHORIZATIONS_REQUEST,\n  FETCH_AUTHORIZATIONS_SUCCESS,\n  FETCH_AUTHORIZATIONS_FAILURE\n} from './actions'\n\nexport type AuthorizationState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: AuthorizationState = {\n  data: [],\n  loading: [],\n  error: null\n}\n\nexport type AuthorizationReducerAction =\n  | FetchAuthorizationsRequestAction\n  | FetchAuthorizationsSuccessAction\n  | FetchAuthorizationsFailureAction\n\nexport const authorizationReducer = (state = INITIAL_STATE, action: AuthorizationReducerAction): AuthorizationState => {\n  switch (action.type) {\n    case FETCH_AUTHORIZATIONS_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_AUTHORIZATIONS_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.authorizations,\n        error: null\n      }\n    case FETCH_AUTHORIZATIONS_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { CatalystResponse, FileSize, Info } from './reducer'\n\nexport const FETCH_FILES_REQUEST = '[Request] Fetch Files'\nexport const FETCH_FILES_SUCCESS = '[Success] Fetch Files'\nexport const FETCH_FILES_FAILURE = '[Failure] Fetch Files'\n\nexport const FETCH_INFO_REQUEST = '[Request] Fetch info'\nexport const FETCH_INFO_SUCCESS = '[Success] Fetch info'\nexport const FETCH_INFO_FAILURE = '[Failure] Fetch info'\n\nexport const FETCH_CATALYST_REQUEST = '[Request] Fetch catalyst'\nexport const FETCH_CATALYST_SUCCESS = '[Success] Fetch catalyst'\nexport const FETCH_CATALYST_FAILURE = '[Failure] Fetch catalyst'\n\nexport const fetchFilesRequest = () => action(FETCH_FILES_REQUEST)\nexport const fetchFilesSuccess = (files: FileSize[]) => action(FETCH_FILES_SUCCESS, { files })\nexport const fetchFilesFailure = (error: string) => action(FETCH_FILES_FAILURE, { error })\n\nexport const fetchInfoRequest = () => action(FETCH_INFO_REQUEST)\nexport const fetchInfoSuccess = (info: Info) => action(FETCH_INFO_SUCCESS, { info })\nexport const fetchInfoFailure = (error: string) => action(FETCH_INFO_FAILURE, { error })\n\nexport const fetchCatalystRequest = () => action(FETCH_CATALYST_REQUEST)\nexport const fetchCatalystSuccess = (payload: CatalystResponse) => action(FETCH_CATALYST_SUCCESS, payload)\nexport const fetchCatalystFailure = (error: string) => action(FETCH_CATALYST_FAILURE, { error })\n\nexport type FetchFilesRequestAction = ReturnType<typeof fetchFilesRequest>\nexport type FetchFilesSuccessAction = ReturnType<typeof fetchFilesSuccess>\nexport type FetchFilesFailureAction = ReturnType<typeof fetchFilesFailure>\n\nexport type FetchInfoRequestAction = ReturnType<typeof fetchInfoRequest>\nexport type FetchInfoSuccessAction = ReturnType<typeof fetchInfoSuccess>\nexport type FetchInfoFailureAction = ReturnType<typeof fetchInfoFailure>\n\nexport type FetchCatalystRequest = ReturnType<typeof fetchCatalystRequest>\nexport type FetchCatalystSuccess = ReturnType<typeof fetchCatalystSuccess>\nexport type FetchCatalystFailure = ReturnType<typeof fetchCatalystFailure>\n","import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { Coords } from '../land/types'\n\nimport {\n  FetchFilesRequestAction,\n  FetchFilesSuccessAction,\n  FetchFilesFailureAction,\n  FETCH_FILES_REQUEST,\n  FETCH_FILES_SUCCESS,\n  FETCH_FILES_FAILURE,\n  FETCH_INFO_REQUEST,\n  FETCH_INFO_FAILURE,\n  FETCH_INFO_SUCCESS,\n  FetchInfoRequestAction,\n  FetchInfoSuccessAction,\n  FetchInfoFailureAction,\n  FetchCatalystFailure,\n  FetchCatalystRequest,\n  FetchCatalystSuccess,\n  FETCH_CATALYST_REQUEST,\n  FETCH_CATALYST_SUCCESS,\n  FETCH_CATALYST_FAILURE\n} from './actions'\n\nexport type Info = {\n  baseParcel: Coords\n  parcels: Coords[]\n  rootCID: string\n  debug: boolean\n  estateRegistry?: string\n  landRegistry?: string\n  title?: string\n  description?: string\n}\n\nexport type FileSize = {\n  name: string\n  size: string\n}\n\nexport type CatalystResponse = {\n  catalysts: {\n    url: string\n    timestamp: number\n    entityId: string\n  }[]\n  status: 'deploying' | 'success' | 'closed'\n}\n\nexport type ApiState = {\n  files: FileSize[]\n  loading: LoadingState\n  error: string | null\n  catalyst: CatalystResponse | undefined\n  info: Info | undefined\n}\n\nconst INITIAL_STATE: ApiState = {\n  info: undefined,\n  files: [],\n  loading: [],\n  error: null,\n  catalyst: undefined\n}\n\nexport type ApiReducerAction =\n  | FetchFilesRequestAction\n  | FetchFilesSuccessAction\n  | FetchFilesFailureAction\n  | FetchInfoRequestAction\n  | FetchInfoSuccessAction\n  | FetchInfoFailureAction\n  | FetchCatalystFailure\n  | FetchCatalystRequest\n  | FetchCatalystSuccess\n\nexport const apiReducer = (state = INITIAL_STATE, action: ApiReducerAction): ApiState => {\n  switch (action.type) {\n    case FETCH_FILES_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_FILES_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        files: action.payload.files,\n        error: null\n      }\n    case FETCH_FILES_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        files: []\n      }\n    case FETCH_CATALYST_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_CATALYST_SUCCESS:\n      if (!action.payload.catalysts.length) {\n        return state\n      }\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        catalyst: action.payload,\n        error: null\n      }\n    case FETCH_CATALYST_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        catalyst: undefined\n      }\n    case FETCH_INFO_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_INFO_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        info: {\n          ...action.payload.info,\n          baseParcel: parseCoords((action.payload.info.baseParcel as any) as string)[0],\n          parcels: parseCoords((action.payload.info.parcels as any) as string),\n          rootCID: action.payload.info.rootCID || 'QmPjpPyibbryTCi75zzcdeuPUBcujtEqj43shwKBAdMojy'\n        },\n        error: null\n      }\n    case FETCH_INFO_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        info: undefined\n      }\n    default: {\n      return state\n    }\n  }\n}\n\nfunction parseCoords(query: string | string[] | null): Coords[] {\n  if (!query) return [{ x: 0, y: 0 }]\n  const coords = typeof query === 'string' ? [query] : query\n  return coords.map(c => {\n    const [x, y] = c.split(',')\n    return { x: parseInt(x, 10), y: parseInt(y, 10) }\n  })\n}\n","import { combineReducers } from 'redux'\nimport { walletReducer as wallet } from 'decentraland-dapps/dist/modules/wallet/reducer'\nimport { transactionReducer as transaction } from 'decentraland-dapps/dist/modules/transaction/reducer'\nimport { translationReducer as translation } from 'decentraland-dapps/dist/modules/translation/reducer'\nimport { storageReducer as storage, storageReducerWrapper } from 'decentraland-dapps/dist/modules/storage/reducer'\n\nimport { landReducer as land } from './modules/land/reducer'\nimport { signatureReducer as signature } from './modules/signature/reducer'\nimport { authorizationReducer as authorization } from './modules/authorization/reducer'\nimport { apiReducer as api } from './modules/server/reducer'\nimport { RootState } from './types'\n\nexport const rootReducer = storageReducerWrapper(\n  combineReducers<RootState>({\n    storage,\n    wallet,\n    transaction,\n    translation,\n    land,\n    signature,\n    authorization,\n    api\n  })\n)\n","import { Contract } from '@ethersproject/contracts'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from '@dcl/schemas'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\n\nimport * as EstateRegistry from './abis/EstateRegistry.json'\nimport * as LANDRegistry from './abis/LANDRegistry.json'\n\nexport enum ContractName {\n  LANDRegistry = 'land',\n  EstateRegistry = 'estate'\n}\n\nconst contractsByChainId: Record<ContractName, Partial<Record<ChainId, { abi: any[], address: string }>>> = {\n  [ContractName.LANDRegistry]: {\n    [ChainId.ETHEREUM_MAINNET]: {\n      address: '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d',\n      abi: LANDRegistry.abi\n    },\n    [ChainId.ETHEREUM_GOERLI]: {\n      address: '0x25b6B4bac4aDB582a0ABd475439dA6730777Fbf7',\n      abi: LANDRegistry.abi\n    },\n  },\n  [ContractName.EstateRegistry]: {\n    [ChainId.ETHEREUM_MAINNET]: {\n      address: '0x959e104e1a4db6317fa58f8295f586e1a978c297',\n      abi: EstateRegistry.abi\n    },\n    [ChainId.ETHEREUM_GOERLI]: {\n      address: '0xC9A46712E6913c24d15b46fF12221a79c4e251DC',\n      abi: EstateRegistry.abi\n    }\n  }\n}\n\nexport async function getProvider() {\n  const provider = await getConnectedProvider()\n  if (!provider) {\n    throw new Error('no provider')\n  }\n  return new Web3Provider(provider)\n}\n\nexport function getContract(name: ContractName, chainId: ChainId) {\n  const contract = contractsByChainId[name][chainId]\n  if (!contract) {\n    throw new Error(`Contract \"${name}\" not found for chain id \"${chainId}\"`)\n  }\n  return contract\n}\n\nexport async function getContractByName(name: ContractName) {\n  const provider = await getProvider()\n  const { chainId } = await provider.getNetwork()\n  return getContract(name, chainId)\n}\n\nexport async function getLandContract(landRegistry?: string) {\n  const { address, abi } = await getContractByName(ContractName.LANDRegistry)\n  const provider = await getProvider()\n  const contract = new Contract(landRegistry || address, abi, provider)\n  return contract\n}\n\nexport async function getEstateContract(estateRegistry?: string) {\n  const { address, abi } = await getContractByName(ContractName.EstateRegistry)\n  return new Contract(estateRegistry || address, abi, await getProvider())\n}\n","import { RootState } from '../../types'\n\nexport const getFiles = (state: RootState) => state.api.files\nexport const isLoading = (state: RootState) => !!state.api.loading.length\nexport const getError = (state: RootState) => state.api.error\nexport const getInfo = (state: RootState) => state.api.info\n","import { call, put, select, takeEvery } from 'redux-saga/effects'\nimport { CONNECT_WALLET_SUCCESS } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport * as CSV from 'comma-separated-values'\n\nimport { getLandContract } from '../../contracts'\nimport { FETCH_LAND_REQUEST, fetchLandSuccess, fetchLandFailure, fetchLandRequest } from './actions'\nimport { getEmptyLandData } from './utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { LANDMeta } from './types'\nimport { Info } from '../server/reducer'\nimport { getInfo } from '../server/selectors'\n\nexport function* landSaga() {\n  yield takeEvery(FETCH_LAND_REQUEST, handleFetchLandRequest)\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n}\n\nfunction* handleFetchLandRequest() {\n  const info: Info = yield select(getInfo)\n  const LANDRegistry: Contract = yield call(() => getLandContract(info.landRegistry))\n  try {\n    const { x, y } = info.baseParcel\n    const data: string = yield call(() => LANDRegistry['landData'](x, y))\n    const land: LANDMeta = data ? yield call(() => decodeLandData(data)) : getEmptyLandData()\n    yield put(fetchLandSuccess(land))\n  } catch (error) {\n    yield put(fetchLandFailure((error as Error).message))\n  }\n}\n\nfunction* handleConnectWalletSuccess() {\n  yield put(fetchLandRequest())\n}\n\nfunction decodeLandData(data = '') {\n  const version = data.charAt(0)\n  switch (version) {\n    case '0': {\n      const [version, name, description, ipns] = CSV.parse(data, {\n        cellDelimiter: ','\n      })[0]\n\n      return {\n        version,\n        // when a value is blank, csv.parse returns 0, so we fallback to empty string\n        // to support stuff like `0,,,ipns:link`\n        name: name || '',\n        description: description || '',\n        ipns: ipns || ''\n      }\n    }\n    default:\n      throw new Error(`Unknown version when trying to decode land data: \"${data}\"`)\n  }\n}\n","import { LANDMeta, Coords } from './types'\n\nexport function getEmptyLandData(): LANDMeta {\n  return {\n    version: 0,\n    name: '',\n    description: ''\n  }\n}\n\nexport function coordsToString({ x, y }: Coords): string {\n  return `${x},${y}`\n}\n","import { createConfig } from '@dcl/ui-env'\nimport dev from './env/dev.json'\nimport prod from './env/prod.json'\n\nexport const config = createConfig({\n  dev,\n  prod\n})","import { ChainId }from '@dcl/schemas'\nimport { takeEvery, all, call } from 'redux-saga/effects'\nimport { createWalletSaga } from 'decentraland-dapps/dist/modules/wallet/sagas'\nimport { CHANGE_NETWORK, CHANGE_ACCOUNT } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { config } from '../../config'\n\nexport function* walletSaga() {\n  const baseWalletSaga = createWalletSaga({\n    CHAIN_ID: config.get('CHAIN_ID', ChainId.ETHEREUM_MAINNET.toString())\n  })\n  yield all([baseWalletSaga(), fullWalletSaga()])\n}\n\nfunction* fullWalletSaga() {\n  yield takeEvery(CHANGE_NETWORK, handleWallet)\n  yield takeEvery(CHANGE_ACCOUNT, handleWallet)\n}\n\nfunction* handleWallet() {\n  yield call(() => window.location.reload())\n}\n","import { ChainId } from '@dcl/schemas'\nimport { AuthIdentity } from 'dcl-crypto'\n\nexport type DeployScene =\n  | {\n      address: string\n      signature: string\n      chainId: ChainId\n    }\n  | Record<string, never>\n\nexport type LinkerResponseIdentity = {\n  responseType: 'identity'\n  payload: {\n    address: string\n    chainId: ChainId\n    identity: AuthIdentity\n  }\n}\n\n\nexport async function closeServer(ok: boolean, message: LinkerResponseIdentity): Promise<void> {\n  await fetch(`/api/close?ok=${ok}&reason=${JSON.stringify(message)}`)\n}\n\nexport async function postDeploy(payload: DeployScene): Promise<void> {\n  await fetch(`/api/deploy`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  })\n}\n\nexport async function getFilesRequest(): Promise<void> {\n  return (await fetch(`/api/files`)).json()\n}\n\nexport async function getInfoRequest(): Promise<void> {\n  return (await fetch(`/api/info`)).json()\n}\n\nexport async function getCatalystsPointer(): Promise<void> {\n  return (await fetch(`/api/catalyst-pointers`)).json()\n}\n","import { call, put, takeLatest, takeEvery, select } from 'redux-saga/effects'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { getAddress, getChainId } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { toUtf8Bytes } from '@ethersproject/strings'\nimport { ChainId } from '@dcl/schemas'\nimport { hexlify } from '@ethersproject/bytes'\nimport { closeServer, postDeploy } from '../server/utils'\nimport {\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SignContentRequestAction,\n  signContentSuccess,\n  signContentFailure,\n  SignContentSuccessAction,\n  CREATE_IDENTITY_REQUEST,\n  createIdentitySuccess,\n  createIdentityFailure,\n  CREATE_IDENTITY_SUCCESS,\n  CreateIdentitySuccessAction\n} from './actions'\nimport { Provider } from 'decentraland-connect/dist'\nimport { AuthIdentity } from 'dcl-crypto'\nimport { createIdentity } from '@dcl/builder-client'\nimport { fetchCatalystRequest } from '../server/actions'\n\nexport function* signatureSaga() {\n  yield takeLatest(SIGN_CONTENT_REQUEST, handleSignContentRequest)\n  yield takeEvery(SIGN_CONTENT_SUCCESS, handleSignContentSuccess)\n\n  yield takeLatest(CREATE_IDENTITY_REQUEST, handleCreateIdentityRequest)\n  yield takeLatest(CREATE_IDENTITY_SUCCESS, handleCreateIdentitySuccess)\n}\n\nfunction* handleSignContentRequest(action: SignContentRequestAction) {\n  try {\n    const dataToSign = toUtf8Bytes(action.payload)\n\n    const provider: Provider = yield call(() => getConnectedProvider())\n    const web3provider = new Web3Provider(provider)\n    const signer = web3provider.getSigner()\n\n    const addr: string = yield call(() => signer.getAddress())\n\n    const signedMessage: string = yield call(() =>\n      provider.send('personal_sign', [hexlify(dataToSign), addr.toLowerCase()])\n    )\n    yield put(signContentSuccess(signedMessage))\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n\nfunction* handleSignContentSuccess(action: SignContentSuccessAction) {\n  const address: string = yield select(getAddress)\n  const chainId: ChainId = yield select(getChainId)\n  const { signature } = action.payload\n\n  try {\n    yield call(postDeploy, { signature, address, chainId })\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n\nfunction* handleCreateIdentityRequest(_action: SignContentRequestAction) {\n  try {\n    const provider: Provider = yield call(() => getConnectedProvider())\n    const web3provider = new Web3Provider(provider)\n    const signer = web3provider.getSigner()\n    const identity: AuthIdentity = yield call(() => createIdentity(signer, 1000))\n    yield put(createIdentitySuccess(identity))\n    yield put(fetchCatalystRequest())\n  } catch (error) {\n    yield put(createIdentityFailure((error as Error).message))\n  }\n}\n\nfunction* handleCreateIdentitySuccess(action: CreateIdentitySuccessAction) {\n  const { identity } = action.payload\n  const address: string = yield select(getAddress)\n  const chainId: ChainId = yield select(getChainId)\n\n  try {\n    yield call(closeServer, true, {\n      responseType: 'identity',\n      payload: { identity, address, chainId }\n    })\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n","import { getEstateContract, getLandContract } from \"../../contracts\"\nimport { BigNumber } from \"ethers\"\n\nexport async function isAuthorized(x: number, y: number, address: string, landRegistry?: string, estateRegistry?: string) {\n  // Do not delete me\n  await unlockRegeneratorRuntime()\n\n  const land = await getLandContract(landRegistry)\n  const landTokenId: BigNumber = await land.encodeTokenId(x, y)\n  const isUpdateAuthorized = await land.isUpdateAuthorized(address, landTokenId)\n  \n  if (!isUpdateAuthorized) {\n    // check if estate is authorized\n    const estate = await getEstateContract(estateRegistry)\n    const estateTokenId = await estate.getLandEstateId(landTokenId)\n    if (estateTokenId && estateTokenId > 0) {\n      const isUpdateAuthorized = await estate.isUpdateAuthorized(address, estateTokenId)\n      return { x, y, isUpdateAuthorized }\n    } \n  }\n  return { x, y, isUpdateAuthorized }\n}\n\nasync function unlockRegeneratorRuntime() {\n  // For some reason, without these awaits, the ones below never resolve. They don't throw either, they just get stuck...\n  \n  // BEGIN DRAGONS 🐉\n  const m = async (n: number) => n\n  await m(1)\n  await m(2)\n  await m(3)\n  await m(4)\n  // END DRAGONS 🐉\n}","import { call, put, takeEvery, select, take } from 'redux-saga/effects'\nimport { CONNECT_WALLET_SUCCESS } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  FETCH_AUTHORIZATIONS_REQUEST,\n  fetchAuthorizationsRequest,\n  fetchAuthorizationsFailure,\n  fetchAuthorizationsSuccess\n} from './actions'\nimport { Authorization } from './types'\nimport { Info } from '../server/reducer'\nimport { FETCH_INFO_SUCCESS } from '../server/actions'\nimport { getInfo } from '../server/selectors'\nimport { isAuthorized } from './utils'\n\nexport function* authorizationSaga() {\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n  yield takeEvery(FETCH_AUTHORIZATIONS_REQUEST, handleFetchAuthorizationsRequest)\n}\n\nfunction* handleFetchAuthorizationsRequest() {\n  const info: Info = yield select(getInfo)\n\n  if (!info) {\n    yield take(FETCH_INFO_SUCCESS)\n  }\n\n  const qs = new URLSearchParams(document.location.search)\n\n  const skipValidations = qs.get('skipValidations')\n  if (skipValidations === 'true') {\n    try {\n      const { parcels } = info\n      yield put(\n        fetchAuthorizationsSuccess(\n          parcels.map(({ x, y }) => ({\n            x,\n            y,\n            isUpdateAuthorized: true\n          }))\n        )\n      )\n    } catch (error) {\n      yield put(fetchAuthorizationsFailure((error as Error).message))\n    }\n  } else {\n    const { parcels, landRegistry, estateRegistry } = info\n\n    try {\n      const address: string = yield select(getAddress)\n      const promises: Promise<Authorization>[] = parcels.map(parcel => isAuthorized(parcel.x, parcel.y, address, landRegistry, estateRegistry))\n      const authorizations: Authorization[] = yield call(() => Promise.all(promises))\n      yield put(fetchAuthorizationsSuccess(authorizations))\n    } catch (error) {\n      yield put(fetchAuthorizationsFailure((error as Error).message))\n    }\n  }\n}\n\nfunction* handleConnectWalletSuccess(): any {\n  const address = yield select(getAddress)\n  yield put(fetchAuthorizationsRequest(address))\n}\n","import { takeEvery, call, put } from 'redux-saga/effects'\n\nimport {\n  fetchCatalystSuccess,\n  fetchFilesFailure,\n  fetchFilesSuccess,\n  fetchInfoFailure,\n  fetchInfoSuccess,\n  FETCH_CATALYST_REQUEST,\n  FETCH_FILES_REQUEST,\n  FETCH_INFO_REQUEST\n} from './actions'\nimport { CatalystResponse, FileSize, Info } from './reducer'\nimport { getCatalystsPointer, getFilesRequest, getInfoRequest } from './utils'\n\nexport function* apiSaga() {\n  yield takeEvery(FETCH_FILES_REQUEST, handleFetchFilesRequest)\n  yield takeEvery(FETCH_INFO_REQUEST, handleFetchInfoRequest)\n  yield takeEvery(FETCH_CATALYST_REQUEST, handleFetchCatalystRequest)\n}\n\nfunction* handleFetchFilesRequest() {\n  try {\n    const files: FileSize[] = yield call(getFilesRequest)\n    yield put(fetchFilesSuccess(files))\n  } catch (e) {\n    yield put(fetchFilesFailure((e as any).message))\n  }\n}\n\nfunction* handleFetchInfoRequest() {\n  try {\n    const info: Info = yield call(getInfoRequest)\n    yield put(fetchInfoSuccess(info))\n  } catch (e) {\n    yield put(fetchInfoFailure((e as any).message))\n  }\n}\n\nfunction* handleFetchCatalystRequest() {\n  try {\n    const value: CatalystResponse = yield call(getCatalystsPointer)\n    yield put(fetchCatalystSuccess(value))\n  } catch (e) {\n    yield put(fetchInfoFailure((e as any).message))\n  }\n}\n","import { createTranslationSaga } from 'decentraland-dapps/dist/modules/translation/sagas'\nimport * as translations from './locales'\n\nexport const translationSaga = createTranslationSaga({\n  translations\n})\n","import { createSelector } from 'reselect'\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.signature\nexport const getData = createSelector(getState, state => state.data)\nexport const isLoading = createSelector(getState, state => state.loading.length > 0)\nexport const getError = createSelector(getState, state => state.error)\n","import React from 'react'\n\nexport default React.memo(({ children }: { children: string }) => (\n  <p style={{ color: 'var(--primary)' }}> Error: {children}</p>\n))\n","import { Props } from './types'\nimport { Blockie, Address, Button } from 'decentraland-ui'\nimport { coordsToString } from '../../modules/land/utils'\nimport Error from '../Error'\n\nexport default function RenderWalletData({\n  isConnected,\n  isConnecting,\n  wallet,\n  authorizations,\n  isUpdateAuthorized,\n  onConnectWallet\n}: Props) {\n  function getFormattedUnauthorized() {\n    return (authorizations || [])\n      .filter(a => !a.isUpdateAuthorized)\n      .map(a => `\"${coordsToString(a)}\"`)\n      .join(', ')\n  }\n\n  if (isConnected && wallet.address) {\n    return (\n      <>\n        <p>\n          Using address: &nbsp;\n          <Blockie scale={3} seed={wallet.address}>\n            <Address tooltip strong value={wallet.address} />\n          </Blockie>\n        </p>\n        {authorizations?.length && !isUpdateAuthorized ? (\n          <Error>\n            {`You don't have permissions to update The following LANDs that are part of the scene: ${getFormattedUnauthorized()}`}\n          </Error>\n        ) : null}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isConnecting ? null : <p>Could not find any wallet</p>}\n      <p>\n        <Button primary onClick={onConnectWallet} loading={isConnecting} disabled={isConnecting}>\n          Reconnect&nbsp;\n        </Button>\n      </p>\n    </>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getData as getWallet, isConnected, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport { getData as getSignature, isLoading as isSigningTx } from '../../modules/signature/selectors'\n\nimport { createIdentityRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport IdentityPage from './IdentityPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    wallet: getWallet(state)!,\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    signed: !!getSignature(state),\n    isSigning: isSigningTx(state)\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: providerType => dispatch(enableWalletRequest(providerType)),\n  onRequestIdentity: () => dispatch(createIdentityRequest())\n})\n\nexport default connect(mapState, mapDispatch)(IdentityPage)\n","import './style.css'\nimport { Container, Dropdown, Table } from 'decentraland-ui'\nimport { Props } from './types'\nimport { useMemo, useState } from 'react'\nimport { FileSize } from '../../modules/server/reducer'\n\nenum Filter {\n  Size = 'Size',\n  Name = 'Name'\n}\n\nexport default function FilesPage({ files }: Props) {\n  const [filter, setFilter] = useState<Filter>(Filter.Size)\n  const value = useMemo<FileSize[]>(\n    () =>\n      files.sort((a, b) => {\n        if (filter === Filter.Size) {\n          return b.size < a.size ? -1 : 1\n        }\n        return a.name < b.name ? -1 : 1\n      }),\n    [files, filter]\n  )\n\n  return (\n    <Container>\n      <Table basic=\"very\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>File Name</Table.HeaderCell>\n            <Table.HeaderCell>Size</Table.HeaderCell>\n            <Table.HeaderCell>\n              <Dropdown text={filter} direction=\"right\">\n                <Dropdown.Menu>\n                  {Object.values(Filter).map(f => (\n                    <Dropdown.Item key={f} onClick={() => setFilter(f)} text={f} />\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {value.map(({ name, size }, index) => (\n            <Table.Row key={index}>\n              <Table.Cell>{name}</Table.Cell>\n              <Table.Cell>{(Number(size) * 1e-6).toFixed(2)} MB </Table.Cell>\n              <Table.Cell />\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  )\n}\n","import IdentityPage from './IdentityPage.container'\nexport default IdentityPage\n","import { SyntheticEvent, useEffect, useState } from 'react'\nimport { ChainId } from '@dcl/schemas'\nimport { Header, Button, Navbar } from 'decentraland-ui'\nimport LoginModal from 'decentraland-dapps/dist/containers/LoginModal'\nimport RenderWalletData from '../RenderWalletData/RenderWalletData'\nimport { Props } from './types'\nimport './style.css'\n\nexport default function IdentityPage(props: Props) {\n  const { isConnected, wallet, isConnecting, onConnectWallet, isSigning, onRequestIdentity } = props\n\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const handleSignature = (e: SyntheticEvent) => {\n    e.preventDefault()\n    onRequestIdentity()\n  }\n\n  // Close modal once the wallet is connected\n  useEffect(() => {\n    if (isConnected && isModalOpen) {\n      setIsModalOpen(false)\n    }\n  }, [isConnected, isModalOpen])\n\n  return (\n    <div className=\"LinkScenePage\">\n      {wallet.chainId === ChainId.ETHEREUM_GOERLI && <div className=\"warning\">Using Goerli test network</div>}\n      <Navbar />\n      <Header>Create an identity to sign deployments </Header>\n      <RenderWalletData\n        isUpdateAuthorized={true}\n        isConnected={isConnected}\n        isConnecting={isConnecting}\n        wallet={wallet}\n        onConnectWallet={() => setIsModalOpen(true)}\n      />\n      <form>\n        <div>\n          <Button primary onClick={handleSignature} disabled={!isConnected} loading={isSigning}>\n            Sign ephemeral wallet\n          </Button>\n        </div>\n      </form>\n      <LoginModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onConnect={onConnectWallet}\n          isLoading={isConnecting}\n        />\n    </div>\n  )\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.land\n\nexport const getData = createSelector(getState, state => state.data)\n\nexport const isLoading = createSelector(getState, state => state.loading.length > 0)\n\nexport const getError = createSelector(getState, state => state.error)\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../../types'\nimport { Authorization } from './types'\n\nexport const getState = (state: RootState) => state.authorization\n\nexport const getData = createSelector(getState, state => state.data)\n\nexport const isLoading = createSelector(getState, state => state.loading.length > 0)\n\nexport const getError = createSelector(getState, state => state.error)\n\nexport const isUpdateAuthorized = createSelector(getData, authorizations => {\n  if (!authorizations?.length) {\n    return\n  }\n\n  return authorizations.every((a: Authorization) => a.isUpdateAuthorized)\n})\n","import { connect } from 'react-redux'\nimport { RootState } from '../../types'\nimport { MapStateProps } from './types'\n\nimport FilesPage from './Files'\nimport { getFiles } from '../../modules/server/selectors'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return { files: getFiles(state) }\n}\n\nexport default connect(mapState)(FilesPage)\n","import Files from './Files.container'\nexport default Files\n","import './style.css'\nimport { Atlas, Container, Coord, Layer, Section, Table } from 'decentraland-ui'\nimport { Props } from './types'\n\nexport default function LinkScenePage({ authorizations, parcels, baseParcel }: Props) {\n  const find = <T extends Coord>(coords: T[]) => (x: number, y: number): T | undefined =>\n    coords.find(s => s.x === x && s.y === y)\n\n  const selectedFillLayer: Layer = (x: number, y: number) => {\n    return find(parcels)(x, y) ? { color: '#ff99', scale: 1.2 } : null\n  }\n\n  const selectedStroke: Layer = (x: number, y: number) => {\n    return find(parcels)(x, y) ? { color: '#ff0044', scale: 1.4 } : null\n  }\n\n  return (\n    <Container>\n      {!!parcels.length && (\n        <Section size=\"large\" className=\"map-table\">\n          <Table basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell>Coordinates</Table.HeaderCell>\n                <Table.HeaderCell>Permissions</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {parcels.map((coords, index) => {\n                const isAuthorized = !!find(authorizations || [])(coords.x, coords.y)?.isUpdateAuthorized\n                return (\n                  <Table.Row key={index}>\n                    <Table.Cell>Parcel {index}</Table.Cell>\n                    <Table.Cell>\n                      {coords.x}, {coords.y}\n                    </Table.Cell>\n                    <Table.Cell className={!isAuthorized ? 'permission-not-granted' : ''}>\n                      {authorizations.length ? (isAuthorized ? 'Granted' : 'Not granted') : ''}\n                    </Table.Cell>\n                  </Table.Row>\n                )\n              })}\n            </Table.Body>\n          </Table>\n        </Section>\n      )}\n      <Container>\n        <Section size=\"large\" className=\"map-canvas\">\n          <Atlas\n            height={300}\n            x={baseParcel.x}\n            y={baseParcel.y}\n            isDraggable={false}\n            layers={[selectedStroke, selectedFillLayer]}\n          />\n        </Section>\n      </Container>\n    </Container>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport DeploySuccess from './DeploySuccess'\nimport { fetchCatalystRequest } from '../../modules/server/actions'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    status: state.api.catalyst?.status,\n    catalysts: state.api.catalyst?.catalysts || []\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => {\n  return {\n    onFetchCatalyst: () => dispatch(fetchCatalystRequest())\n  }\n}\n\nexport default connect(mapState, mapDispatch)(DeploySuccess)\n","import {\n  Navbar,\n  Tabs,\n  Footer,\n  Page,\n  Header,\n  Icon,\n  Button,\n  Container,\n  HeaderMenu,\n  Color,\n  Badge,\n  Address,\n  Blockie,\n  Toast,\n  ToastType,\n  Loader\n} from 'decentraland-ui'\nimport LoginModal from 'decentraland-dapps/dist/containers/LoginModal'\nimport { Props } from './types'\nimport { useEffect, useState } from 'react'\nimport Files from '../Files'\nimport Map from '../Map'\n\nimport './style.css'\nimport { ChainId } from '@dcl/schemas'\nimport DeploySuccess from '../DeploySuccess/DeploySuccess.container'\n\nenum Tab {\n  Map = 'Map',\n  Files = 'Files'\n}\n\nexport default function LinkScenePage(props: Props) {\n  const [tab, setTab] = useState<Tab>(Tab.Map)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const {\n    isConnected,\n    wallet,\n    authorizations,\n    isUpdateAuthorized,\n    isConnecting,\n    onConnectWallet,\n    onSignContent,\n    onFetchFiles,\n    onFetchInfo,\n    isSigning,\n    error,\n    isAuthorizationLoading,\n    signed,\n    info\n  } = props\n\n  const { x, y } = info?.baseParcel || { x: 0, y: 0 }\n  const isTestNet = wallet?.chainId === ChainId.ETHEREUM_GOERLI\n  const networkName = isTestNet ? 'zone' : 'org'\n  const deployUrl = `https://play.decentraland.${networkName}/?position=${x},${y}`\n\n  useEffect(() => {\n    onFetchInfo()\n    onFetchFiles()\n  }, [onFetchFiles, onFetchInfo])\n\n  // Close modal once the wallet is connected\n  useEffect(() => {\n    if (isConnected && isModalOpen) {\n      setIsModalOpen(false)\n    }\n  }, [isConnected, isModalOpen])\n\n  return (\n    <div className=\"Page-story-container\">\n      <Navbar leftMenu={<></>} isConnected={isConnected} isConnecting={isConnecting} address={wallet?.address} />\n      <Page>\n        <Container>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              <Container textAlign=\"center\">\n                <Header size=\"large\">Deploying {info?.title || 'Untitled Scene'}</Header>\n                {info?.description && <Header size=\"medium\">{info?.description || 'Some description'}</Header>}\n              </Container>\n            </HeaderMenu.Left>\n          </HeaderMenu>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              <div\n                className=\"address-header url\"\n                onClick={() => deployUrl && window.open(deployUrl!, '_blank')?.focus()}\n              >\n                <Badge color={Color.SUMMER_RED}>\n                  <Icon name=\"point\" />\n                  {x}, {y}\n                </Badge>\n              </div>\n              {!!isConnected && (\n                <div className=\"address-header\">\n                  <Badge color={Color.SHADOWS}>{isTestNet ? 'Goerli' : 'Mainnet'}</Badge>\n                </div>\n              )}\n              <div className=\"address-header\">\n                {!!wallet?.address && (\n                  <Blockie scale={3} seed={wallet.address}>\n                    <Address tooltip strong value={wallet.address} />\n                  </Blockie>\n                )}\n              </div>\n            </HeaderMenu.Left>\n            {!signed && (\n              <HeaderMenu.Right>\n                <Button\n                  primary\n                  size=\"medium\"\n                  loading={isConnecting || isSigning || (isConnected && isAuthorizationLoading)}\n                  disabled={!!error || (isConnected && !isUpdateAuthorized)}\n                  onClick={isConnected ? () => onSignContent(info!.rootCID) : () => setIsModalOpen(true)}\n                >\n                  {isConnected ? 'Sign & Deploy' : 'Connect Wallet'}\n                </Button>\n              </HeaderMenu.Right>\n            )}\n          </HeaderMenu>\n        </Container>\n        {!!(authorizations?.length && !isUpdateAuthorized) && (\n          <Toast\n            type={ToastType.ERROR}\n            title=\"Check LAND permissions\"\n            body=\"You dont have permissions to update some of the coords\"\n          />\n        )}\n        {!signed && (\n          <Tabs isFullscreen>\n            {Object.values(Tab).map(t => (\n              <Tabs.Tab key={t} onClick={() => setTab(t)} active={tab === t}>\n                {t}\n              </Tabs.Tab>\n            ))}\n          </Tabs>\n        )}\n        {!info && <Loader />}\n        {signed && <DeploySuccess />}\n        {!signed && tab === Tab.Files && <Files />}\n        {!signed && info && tab === Tab.Map && (\n          <Map authorizations={authorizations} parcels={info!.parcels} baseParcel={info!.baseParcel} />\n        )}\n        <LoginModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onConnect={onConnectWallet}\n          isLoading={isConnecting}\n        />\n      </Page>\n      <Footer />\n    </div>\n  )\n}\n","import { Badge, Color, Container, HeaderMenu, Table } from 'decentraland-ui'\nimport { Props } from './types'\nimport { useEffect } from 'react'\n\nimport './style.css'\n\nexport default function DeploySuccess({ onFetchCatalyst, catalysts = [], status }: Props) {\n  const entityIds = new Set(catalysts.map(c => c.entityId))\n  const deployedToAll = status === 'success' && entityIds.size === 1\n\n  useEffect(() => {\n    if (deployedToAll) return\n    const interval = setInterval(() => {\n      onFetchCatalyst()\n    }, 5_000)\n    return () => clearInterval(interval)\n  }, [onFetchCatalyst, deployedToAll])\n\n  return (\n    <Container>\n      <HeaderMenu>\n        <Badge color={deployedToAll ? '#20913e' : Color.SUNISH}>\n          {deployedToAll ? 'Deployed successfully to Catalyst servers' : 'Deploying..'}\n        </Badge>\n      </HeaderMenu>\n      <Table basic=\"very\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Catalyst Server</Table.HeaderCell>\n            <Table.HeaderCell>Time</Table.HeaderCell>\n            <Table.HeaderCell>Entity Id</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {(catalysts || []).map(({ url, timestamp, entityId }) => (\n            <Table.Row key={url}>\n              <Table.Cell>{url}</Table.Cell>\n              <Table.Cell>{new Date(timestamp).toLocaleString()}</Table.Cell>\n              <Table.Cell>{entityId}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getData as getWallet, isConnected, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport { isLoading as isLandLoading, getData as getLand, getError as getLandError } from '../../modules/land/selectors'\nimport { getData as getSignature, isLoading as isSigningTx } from '../../modules/signature/selectors'\nimport {\n  getData as getAuthorizations,\n  isUpdateAuthorized,\n  isLoading as isAuthorizationLoading\n} from '../../modules/authorization/selectors'\nimport { signContentRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport LinkerPage from './LinkerPage'\nimport { fetchFilesRequest, fetchInfoRequest } from '../../modules/server/actions'\nimport { getInfo } from '../../modules/server/selectors'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    base: getLand(state),\n    wallet: getWallet(state)!,\n    isLandLoading: isLandLoading(state),\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    error: getLandError(state)!,\n    signed: !!getSignature(state),\n    isUpdateAuthorized: isUpdateAuthorized(state),\n    authorizations: getAuthorizations(state),\n    isAuthorizationLoading: isAuthorizationLoading(state),\n    isSigning: isSigningTx(state),\n    info: getInfo(state)\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: providerType => dispatch(enableWalletRequest(providerType)),\n  onSignContent: (cid: string) => dispatch(signContentRequest(cid)),\n  onFetchFiles: () => dispatch(fetchFilesRequest()),\n  onFetchInfo: () => dispatch(fetchInfoRequest())\n})\n\nexport default connect(mapState, mapDispatch)(LinkerPage)\n","import LinkerPage from './LinkerPage.container'\nexport default LinkerPage\n","import IdentityPage from './IdentityPage'\nimport LinkerPage from './LinkerPage'\n\nconst Root = (props: any) => {\n  const qs = new URLSearchParams(document.location.search)\n\n  if (qs.has('wearableId')) {\n    return <IdentityPage {...props} />\n  }\n\n  return <LinkerPage {...props} />\n}\n\nexport default Root\n","import ReactDOM from 'react-dom'\nimport { TranslationProvider, WalletProvider } from 'decentraland-dapps/dist/providers'\nimport { Provider } from 'react-redux'\n\nimport { initStore } from './store'\n\nimport Root from './components/Root'\n\nimport * as locales from './modules/translation/locales'\n\n// Do not move these before other imports\nimport 'decentraland-ui/lib/styles.css'\nimport 'decentraland-ui/lib/dark-theme.css'\n\n// tslint:disable-next-line: no-floating-promises\nReactDOM.render(\n  <Provider store={initStore()}>\n    <TranslationProvider locales={Object.keys(locales)}>\n      <WalletProvider>\n        <Root />\n      </WalletProvider>\n    </TranslationProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagasMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport { createTransactionMiddleware } from 'decentraland-dapps/dist/modules/transaction/middleware'\nimport { createStorageMiddleware } from 'decentraland-dapps/dist/modules/storage/middleware'\n\nimport { rootReducer } from './reducer'\nimport { rootSaga } from './sagas'\n\nexport function initStore() {\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  const { storageMiddleware, loadStorageMiddleware } = createStorageMiddleware({\n    storageKey: 'decentraland-linker'\n  })\n  const sagasMiddleware = createSagasMiddleware()\n  const transactionMiddleware = createTransactionMiddleware()\n  const loggerMiddleware = createLogger({\n    collapsed: () => true,\n    predicate: (_, _action) => true\n  })\n\n  const middleware = applyMiddleware(sagasMiddleware, loggerMiddleware, storageMiddleware, transactionMiddleware)\n\n  const enhancer = composeEnhancers(middleware)\n  const store = createStore(rootReducer, enhancer)\n\n  sagasMiddleware.run(rootSaga())\n  loadStorageMiddleware(store)\n\n  return store\n}\n","import { all } from 'redux-saga/effects'\n\nimport { landSaga } from './modules/land/sagas'\nimport { walletSaga } from './modules/wallet/sagas'\nimport { signatureSaga } from './modules/signature/sagas'\nimport { authorizationSaga } from './modules/authorization/sagas'\nimport { apiSaga } from './modules/server/sagas'\nimport { translationSaga } from './modules/translation/sagas'\n\nexport function rootSaga() {\n  return function*() {\n    yield all([\n      walletSaga(), \n      landSaga(), \n      signatureSaga(), \n      authorizationSaga(), \n      apiSaga(), \n      translationSaga()\n    ])\n  }\n}\n"],"sourceRoot":""}