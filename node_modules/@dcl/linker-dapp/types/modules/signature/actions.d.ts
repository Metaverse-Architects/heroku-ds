import { AuthIdentity } from 'dcl-crypto';
export declare const SIGN_CONTENT_REQUEST = "[Request] Sign Content";
export declare const SIGN_CONTENT_SUCCESS = "[Success] Sign Content";
export declare const SIGN_CONTENT_FAILURE = "[Failure] Sign Content";
export declare const signContentRequest: (cid: string) => import("typesafe-actions/dist/types").PayloadAction<"[Request] Sign Content", string>;
export declare const signContentSuccess: (signature: string) => import("typesafe-actions/dist/types").PayloadAction<"[Success] Sign Content", {
    signature: string;
}>;
export declare const signContentFailure: (error: string) => import("typesafe-actions/dist/types").PayloadAction<"[Failure] Sign Content", {
    error: string;
}>;
export declare type SignContentRequestAction = ReturnType<typeof signContentRequest>;
export declare type SignContentSuccessAction = ReturnType<typeof signContentSuccess>;
export declare type SignContentFailureAction = ReturnType<typeof signContentFailure>;
export declare const CREATE_IDENTITY_REQUEST = "[Request] Create Identity";
export declare const CREATE_IDENTITY_SUCCESS = "[Success] Create Identity";
export declare const CREATE_IDENTITY_FAILURE = "[Failure] Create Identity";
export declare const createIdentityRequest: () => import("typesafe-actions/dist/types").PayloadAction<"[Request] Create Identity", {}>;
export declare const createIdentitySuccess: (identity: AuthIdentity) => import("typesafe-actions/dist/types").PayloadAction<"[Success] Create Identity", {
    identity: AuthIdentity;
}>;
export declare const createIdentityFailure: (error: string) => import("typesafe-actions/dist/types").PayloadAction<"[Failure] Create Identity", {
    error: string;
}>;
export declare type CreateIdentityRequestAction = ReturnType<typeof createIdentityRequest>;
export declare type CreateIdentitySuccessAction = ReturnType<typeof createIdentitySuccess>;
export declare type CreateIdentityFailureAction = ReturnType<typeof createIdentityFailure>;
