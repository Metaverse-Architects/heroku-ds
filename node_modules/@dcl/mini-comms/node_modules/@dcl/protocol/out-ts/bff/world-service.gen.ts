/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Entity } from "../common/Entity.gen";
import { Empty } from "../google/protobuf/empty.gen";

export const protobufPackage = "decentraland.bff";

export interface PointOfInterest {
  location: string;
}

export interface PoisResponse {
  pois: PointOfInterest[];
}

export interface RequestEntities {
  pointers: string[];
}

export interface EntitiesResponse {
  entities: Entity[];
}

export interface HotScenesResponse {
  hotScenes: HotScene[];
}

export interface HotScene {
  name: string;
  thumbnail: string;
  userCount: number;
  realms: HotSceneRealm[];
  baseParcel: string;
  creator: string;
  description: string;
}

export interface HotSceneRealm {
  realm: string;
  userCount: number;
}

export interface ExploreRealmsResponse {
  realms: RealmStatsResponse[];
}

export interface RealmStatsResponse {
  name: string;
  baseUrl: string;
  userCount: number;
}

function createBasePointOfInterest(): PointOfInterest {
  return { location: "" };
}

export const PointOfInterest = {
  encode(message: PointOfInterest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PointOfInterest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointOfInterest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.location = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PointOfInterest {
    return { location: isSet(object.location) ? String(object.location) : "" };
  },

  toJSON(message: PointOfInterest): unknown {
    const obj: any = {};
    message.location !== undefined && (obj.location = message.location);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<PointOfInterest>, I>>(object: I): PointOfInterest {
    const message = createBasePointOfInterest();
    message.location = object.location ?? "";
    return message;
  },
};

function createBasePoisResponse(): PoisResponse {
  return { pois: [] };
}

export const PoisResponse = {
  encode(message: PoisResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.pois) {
      PointOfInterest.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PoisResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pois.push(PointOfInterest.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PoisResponse {
    return { pois: Array.isArray(object?.pois) ? object.pois.map((e: any) => PointOfInterest.fromJSON(e)) : [] };
  },

  toJSON(message: PoisResponse): unknown {
    const obj: any = {};
    if (message.pois) {
      obj.pois = message.pois.map((e) => e ? PointOfInterest.toJSON(e) : undefined);
    } else {
      obj.pois = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<PoisResponse>, I>>(object: I): PoisResponse {
    const message = createBasePoisResponse();
    message.pois = object.pois?.map((e) => PointOfInterest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRequestEntities(): RequestEntities {
  return { pointers: [] };
}

export const RequestEntities = {
  encode(message: RequestEntities, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.pointers) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestEntities {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestEntities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pointers.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RequestEntities {
    return { pointers: Array.isArray(object?.pointers) ? object.pointers.map((e: any) => String(e)) : [] };
  },

  toJSON(message: RequestEntities): unknown {
    const obj: any = {};
    if (message.pointers) {
      obj.pointers = message.pointers.map((e) => e);
    } else {
      obj.pointers = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<RequestEntities>, I>>(object: I): RequestEntities {
    const message = createBaseRequestEntities();
    message.pointers = object.pointers?.map((e) => e) || [];
    return message;
  },
};

function createBaseEntitiesResponse(): EntitiesResponse {
  return { entities: [] };
}

export const EntitiesResponse = {
  encode(message: EntitiesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.entities) {
      Entity.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EntitiesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.entities.push(Entity.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EntitiesResponse {
    return { entities: Array.isArray(object?.entities) ? object.entities.map((e: any) => Entity.fromJSON(e)) : [] };
  },

  toJSON(message: EntitiesResponse): unknown {
    const obj: any = {};
    if (message.entities) {
      obj.entities = message.entities.map((e) => e ? Entity.toJSON(e) : undefined);
    } else {
      obj.entities = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<EntitiesResponse>, I>>(object: I): EntitiesResponse {
    const message = createBaseEntitiesResponse();
    message.entities = object.entities?.map((e) => Entity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHotScenesResponse(): HotScenesResponse {
  return { hotScenes: [] };
}

export const HotScenesResponse = {
  encode(message: HotScenesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.hotScenes) {
      HotScene.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HotScenesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotScenesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hotScenes.push(HotScene.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): HotScenesResponse {
    return {
      hotScenes: Array.isArray(object?.hotScenes) ? object.hotScenes.map((e: any) => HotScene.fromJSON(e)) : [],
    };
  },

  toJSON(message: HotScenesResponse): unknown {
    const obj: any = {};
    if (message.hotScenes) {
      obj.hotScenes = message.hotScenes.map((e) => e ? HotScene.toJSON(e) : undefined);
    } else {
      obj.hotScenes = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<HotScenesResponse>, I>>(object: I): HotScenesResponse {
    const message = createBaseHotScenesResponse();
    message.hotScenes = object.hotScenes?.map((e) => HotScene.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHotScene(): HotScene {
  return { name: "", thumbnail: "", userCount: 0, realms: [], baseParcel: "", creator: "", description: "" };
}

export const HotScene = {
  encode(message: HotScene, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.thumbnail !== "") {
      writer.uint32(18).string(message.thumbnail);
    }
    if (message.userCount !== 0) {
      writer.uint32(24).uint32(message.userCount);
    }
    for (const v of message.realms) {
      HotSceneRealm.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.baseParcel !== "") {
      writer.uint32(42).string(message.baseParcel);
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HotScene {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotScene();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.thumbnail = reader.string();
          break;
        case 3:
          message.userCount = reader.uint32();
          break;
        case 4:
          message.realms.push(HotSceneRealm.decode(reader, reader.uint32()));
          break;
        case 5:
          message.baseParcel = reader.string();
          break;
        case 6:
          message.creator = reader.string();
          break;
        case 7:
          message.description = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): HotScene {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      thumbnail: isSet(object.thumbnail) ? String(object.thumbnail) : "",
      userCount: isSet(object.userCount) ? Number(object.userCount) : 0,
      realms: Array.isArray(object?.realms) ? object.realms.map((e: any) => HotSceneRealm.fromJSON(e)) : [],
      baseParcel: isSet(object.baseParcel) ? String(object.baseParcel) : "",
      creator: isSet(object.creator) ? String(object.creator) : "",
      description: isSet(object.description) ? String(object.description) : "",
    };
  },

  toJSON(message: HotScene): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.thumbnail !== undefined && (obj.thumbnail = message.thumbnail);
    message.userCount !== undefined && (obj.userCount = Math.round(message.userCount));
    if (message.realms) {
      obj.realms = message.realms.map((e) => e ? HotSceneRealm.toJSON(e) : undefined);
    } else {
      obj.realms = [];
    }
    message.baseParcel !== undefined && (obj.baseParcel = message.baseParcel);
    message.creator !== undefined && (obj.creator = message.creator);
    message.description !== undefined && (obj.description = message.description);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<HotScene>, I>>(object: I): HotScene {
    const message = createBaseHotScene();
    message.name = object.name ?? "";
    message.thumbnail = object.thumbnail ?? "";
    message.userCount = object.userCount ?? 0;
    message.realms = object.realms?.map((e) => HotSceneRealm.fromPartial(e)) || [];
    message.baseParcel = object.baseParcel ?? "";
    message.creator = object.creator ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseHotSceneRealm(): HotSceneRealm {
  return { realm: "", userCount: 0 };
}

export const HotSceneRealm = {
  encode(message: HotSceneRealm, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.realm !== "") {
      writer.uint32(10).string(message.realm);
    }
    if (message.userCount !== 0) {
      writer.uint32(16).uint32(message.userCount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HotSceneRealm {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotSceneRealm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.realm = reader.string();
          break;
        case 2:
          message.userCount = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): HotSceneRealm {
    return {
      realm: isSet(object.realm) ? String(object.realm) : "",
      userCount: isSet(object.userCount) ? Number(object.userCount) : 0,
    };
  },

  toJSON(message: HotSceneRealm): unknown {
    const obj: any = {};
    message.realm !== undefined && (obj.realm = message.realm);
    message.userCount !== undefined && (obj.userCount = Math.round(message.userCount));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<HotSceneRealm>, I>>(object: I): HotSceneRealm {
    const message = createBaseHotSceneRealm();
    message.realm = object.realm ?? "";
    message.userCount = object.userCount ?? 0;
    return message;
  },
};

function createBaseExploreRealmsResponse(): ExploreRealmsResponse {
  return { realms: [] };
}

export const ExploreRealmsResponse = {
  encode(message: ExploreRealmsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.realms) {
      RealmStatsResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExploreRealmsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExploreRealmsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.realms.push(RealmStatsResponse.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ExploreRealmsResponse {
    return {
      realms: Array.isArray(object?.realms) ? object.realms.map((e: any) => RealmStatsResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: ExploreRealmsResponse): unknown {
    const obj: any = {};
    if (message.realms) {
      obj.realms = message.realms.map((e) => e ? RealmStatsResponse.toJSON(e) : undefined);
    } else {
      obj.realms = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ExploreRealmsResponse>, I>>(object: I): ExploreRealmsResponse {
    const message = createBaseExploreRealmsResponse();
    message.realms = object.realms?.map((e) => RealmStatsResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRealmStatsResponse(): RealmStatsResponse {
  return { name: "", baseUrl: "", userCount: 0 };
}

export const RealmStatsResponse = {
  encode(message: RealmStatsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.baseUrl !== "") {
      writer.uint32(18).string(message.baseUrl);
    }
    if (message.userCount !== 0) {
      writer.uint32(24).uint32(message.userCount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RealmStatsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRealmStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.baseUrl = reader.string();
          break;
        case 3:
          message.userCount = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RealmStatsResponse {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
      userCount: isSet(object.userCount) ? Number(object.userCount) : 0,
    };
  },

  toJSON(message: RealmStatsResponse): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
    message.userCount !== undefined && (obj.userCount = Math.round(message.userCount));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<RealmStatsResponse>, I>>(object: I): RealmStatsResponse {
    const message = createBaseRealmStatsResponse();
    message.name = object.name ?? "";
    message.baseUrl = object.baseUrl ?? "";
    message.userCount = object.userCount ?? 0;
    return message;
  },
};

export type WorldManagementServiceDefinition = typeof WorldManagementServiceDefinition;
export const WorldManagementServiceDefinition = {
  name: "WorldManagementService",
  fullName: "decentraland.bff.WorldManagementService",
  methods: {
    getEntities: {
      name: "GetEntities",
      requestType: RequestEntities,
      requestStream: false,
      responseType: EntitiesResponse,
      responseStream: false,
      options: {},
    },
    getPois: {
      name: "GetPois",
      requestType: Empty,
      requestStream: false,
      responseType: PoisResponse,
      responseStream: false,
      options: {},
    },
    getHotScenes: {
      name: "GetHotScenes",
      requestType: Empty,
      requestStream: false,
      responseType: HotScenesResponse,
      responseStream: false,
      options: {},
    },
    getRealms: {
      name: "GetRealms",
      requestType: Empty,
      requestStream: false,
      responseType: ExploreRealmsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
