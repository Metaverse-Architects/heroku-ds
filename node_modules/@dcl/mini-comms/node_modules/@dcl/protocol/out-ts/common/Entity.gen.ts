/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { ContentMapping } from "./ContentMapping.gen";

export const protobufPackage = "decentraland.common";

export interface Entity {
  id: string[];
  pointers: string[];
  metadata: string;
  timestamp: number;
  content: ContentMapping[];
}

function createBaseEntity(): Entity {
  return { id: [], pointers: [], metadata: "", timestamp: 0, content: [] };
}

export const Entity = {
  encode(message: Entity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.id) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.pointers) {
      writer.uint32(18).string(v!);
    }
    if (message.metadata !== "") {
      writer.uint32(26).string(message.metadata);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).uint32(message.timestamp);
    }
    for (const v of message.content) {
      ContentMapping.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Entity {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id.push(reader.string());
          break;
        case 2:
          message.pointers.push(reader.string());
          break;
        case 3:
          message.metadata = reader.string();
          break;
        case 4:
          message.timestamp = reader.uint32();
          break;
        case 5:
          message.content.push(ContentMapping.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Entity {
    return {
      id: Array.isArray(object?.id) ? object.id.map((e: any) => String(e)) : [],
      pointers: Array.isArray(object?.pointers) ? object.pointers.map((e: any) => String(e)) : [],
      metadata: isSet(object.metadata) ? String(object.metadata) : "",
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
      content: Array.isArray(object?.content) ? object.content.map((e: any) => ContentMapping.fromJSON(e)) : [],
    };
  },

  toJSON(message: Entity): unknown {
    const obj: any = {};
    if (message.id) {
      obj.id = message.id.map((e) => e);
    } else {
      obj.id = [];
    }
    if (message.pointers) {
      obj.pointers = message.pointers.map((e) => e);
    } else {
      obj.pointers = [];
    }
    message.metadata !== undefined && (obj.metadata = message.metadata);
    message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
    if (message.content) {
      obj.content = message.content.map((e) => e ? ContentMapping.toJSON(e) : undefined);
    } else {
      obj.content = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Entity>, I>>(object: I): Entity {
    const message = createBaseEntity();
    message.id = object.id?.map((e) => e) || [];
    message.pointers = object.pointers?.map((e) => e) || [];
    message.metadata = object.metadata ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.content = object.content?.map((e) => ContentMapping.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
