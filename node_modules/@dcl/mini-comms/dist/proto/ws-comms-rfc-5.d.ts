import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "protocol.comms.rfc5";
/** Sent to the clients when the challenge is validated and they are authenticated. */
export interface WsWelcome {
    alias: number;
    peerIdentities: {
        [key: number]: string;
    };
}
export interface WsWelcome_PeerIdentitiesEntry {
    key: number;
    value: string;
}
/** Sent to the clients when a user connects and their identity is authenticated. */
export interface WsPeerJoin {
    alias: number;
    address: string;
}
/** Sent to the clients when a user gets disconnected. */
export interface WsPeerLeave {
    alias: number;
}
/** This is the data package for all user messages. */
export interface WsPeerUpdate {
    fromAlias: number;
    body: Uint8Array;
    unreliable: boolean;
}
/**
 * Sent to the clients as first message, it contains a challenge string and a
 * hint about if the same address is connected to another room. In such case,
 * after authentication, the server may decide to end the former connection. This
 * hint exists for UX purposes of the explorers for cases like multiple running
 * instances of the explorer.
 */
export interface WsChallengeRequired {
    challengeToSign: string;
    alreadyConnected: boolean;
}
/** Response to WsChallengeRequired, signed using the AuthChain mechanism. */
export interface WsSignedChallenge {
    authChainJson: string;
}
/**
 * This is the first message sent by the clients, it us used to identify the client
 * in the server.
 */
export interface WsIdentification {
    address: string;
}
/**
 * This message is received by the peers when the same address logs in in a
 * different session. It should signal that the client should be shut down and not
 * retry any new comms connection.
 */
export interface WsKicked {
}
export interface WsPacket {
    /** direction: server->client */
    welcomeMessage: WsWelcome | undefined;
    /** direction: server->client */
    peerJoinMessage: WsPeerJoin | undefined;
    /** direction: client->(server)->client */
    peerUpdateMessage: WsPeerUpdate | undefined;
    /** direction: server->client */
    challengeMessage: WsChallengeRequired | undefined;
    /** direction: client->server */
    signedChallengeForServer: WsSignedChallenge | undefined;
    /** direction: server->client */
    peerLeaveMessage: WsPeerLeave | undefined;
    /** direction: client->server */
    peerIdentification: WsIdentification | undefined;
    /** direction: server->client */
    peerKicked: WsKicked | undefined;
}
export declare const WsWelcome: {
    encode(message: WsWelcome, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsWelcome;
    fromJSON(object: any): WsWelcome;
    toJSON(message: WsWelcome): unknown;
    fromPartial<I extends {
        alias?: number | undefined;
        peerIdentities?: {
            [x: number]: string | undefined;
        } | undefined;
    } & {
        alias?: number | undefined;
        peerIdentities?: ({
            [x: number]: string | undefined;
        } & {
            [x: number]: string | undefined;
        } & { [K in Exclude<keyof I["peerIdentities"], number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof WsWelcome>]: never; }>(object: I): WsWelcome;
};
export declare const WsWelcome_PeerIdentitiesEntry: {
    encode(message: WsWelcome_PeerIdentitiesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsWelcome_PeerIdentitiesEntry;
    fromJSON(object: any): WsWelcome_PeerIdentitiesEntry;
    toJSON(message: WsWelcome_PeerIdentitiesEntry): unknown;
    fromPartial<I extends {
        key?: number | undefined;
        value?: string | undefined;
    } & {
        key?: number | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, keyof WsWelcome_PeerIdentitiesEntry>]: never; }>(object: I): WsWelcome_PeerIdentitiesEntry;
};
export declare const WsPeerJoin: {
    encode(message: WsPeerJoin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerJoin;
    fromJSON(object: any): WsPeerJoin;
    toJSON(message: WsPeerJoin): unknown;
    fromPartial<I extends {
        alias?: number | undefined;
        address?: string | undefined;
    } & {
        alias?: number | undefined;
        address?: string | undefined;
    } & { [K in Exclude<keyof I, keyof WsPeerJoin>]: never; }>(object: I): WsPeerJoin;
};
export declare const WsPeerLeave: {
    encode(message: WsPeerLeave, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerLeave;
    fromJSON(object: any): WsPeerLeave;
    toJSON(message: WsPeerLeave): unknown;
    fromPartial<I extends {
        alias?: number | undefined;
    } & {
        alias?: number | undefined;
    } & { [K in Exclude<keyof I, "alias">]: never; }>(object: I): WsPeerLeave;
};
export declare const WsPeerUpdate: {
    encode(message: WsPeerUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerUpdate;
    fromJSON(object: any): WsPeerUpdate;
    toJSON(message: WsPeerUpdate): unknown;
    fromPartial<I extends {
        fromAlias?: number | undefined;
        body?: Uint8Array | undefined;
        unreliable?: boolean | undefined;
    } & {
        fromAlias?: number | undefined;
        body?: Uint8Array | undefined;
        unreliable?: boolean | undefined;
    } & { [K in Exclude<keyof I, keyof WsPeerUpdate>]: never; }>(object: I): WsPeerUpdate;
};
export declare const WsChallengeRequired: {
    encode(message: WsChallengeRequired, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsChallengeRequired;
    fromJSON(object: any): WsChallengeRequired;
    toJSON(message: WsChallengeRequired): unknown;
    fromPartial<I extends {
        challengeToSign?: string | undefined;
        alreadyConnected?: boolean | undefined;
    } & {
        challengeToSign?: string | undefined;
        alreadyConnected?: boolean | undefined;
    } & { [K in Exclude<keyof I, keyof WsChallengeRequired>]: never; }>(object: I): WsChallengeRequired;
};
export declare const WsSignedChallenge: {
    encode(message: WsSignedChallenge, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsSignedChallenge;
    fromJSON(object: any): WsSignedChallenge;
    toJSON(message: WsSignedChallenge): unknown;
    fromPartial<I extends {
        authChainJson?: string | undefined;
    } & {
        authChainJson?: string | undefined;
    } & { [K in Exclude<keyof I, "authChainJson">]: never; }>(object: I): WsSignedChallenge;
};
export declare const WsIdentification: {
    encode(message: WsIdentification, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsIdentification;
    fromJSON(object: any): WsIdentification;
    toJSON(message: WsIdentification): unknown;
    fromPartial<I extends {
        address?: string | undefined;
    } & {
        address?: string | undefined;
    } & { [K in Exclude<keyof I, "address">]: never; }>(object: I): WsIdentification;
};
export declare const WsKicked: {
    encode(_: WsKicked, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsKicked;
    fromJSON(_: any): WsKicked;
    toJSON(_: WsKicked): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): WsKicked;
};
export declare const WsPacket: {
    encode(message: WsPacket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WsPacket;
    fromJSON(object: any): WsPacket;
    toJSON(message: WsPacket): unknown;
    fromPartial<I extends {
        welcomeMessage?: {
            alias?: number | undefined;
            peerIdentities?: {
                [x: number]: string | undefined;
            } | undefined;
        } | undefined;
        peerJoinMessage?: {
            alias?: number | undefined;
            address?: string | undefined;
        } | undefined;
        peerUpdateMessage?: {
            fromAlias?: number | undefined;
            body?: Uint8Array | undefined;
            unreliable?: boolean | undefined;
        } | undefined;
        challengeMessage?: {
            challengeToSign?: string | undefined;
            alreadyConnected?: boolean | undefined;
        } | undefined;
        signedChallengeForServer?: {
            authChainJson?: string | undefined;
        } | undefined;
        peerLeaveMessage?: {
            alias?: number | undefined;
        } | undefined;
        peerIdentification?: {
            address?: string | undefined;
        } | undefined;
        peerKicked?: {} | undefined;
    } & {
        welcomeMessage?: ({
            alias?: number | undefined;
            peerIdentities?: {
                [x: number]: string | undefined;
            } | undefined;
        } & {
            alias?: number | undefined;
            peerIdentities?: ({
                [x: number]: string | undefined;
            } & {
                [x: number]: string | undefined;
            } & { [K in Exclude<keyof I["welcomeMessage"]["peerIdentities"], number>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["welcomeMessage"], keyof WsWelcome>]: never; }) | undefined;
        peerJoinMessage?: ({
            alias?: number | undefined;
            address?: string | undefined;
        } & {
            alias?: number | undefined;
            address?: string | undefined;
        } & { [K_2 in Exclude<keyof I["peerJoinMessage"], keyof WsPeerJoin>]: never; }) | undefined;
        peerUpdateMessage?: ({
            fromAlias?: number | undefined;
            body?: Uint8Array | undefined;
            unreliable?: boolean | undefined;
        } & {
            fromAlias?: number | undefined;
            body?: Uint8Array | undefined;
            unreliable?: boolean | undefined;
        } & { [K_3 in Exclude<keyof I["peerUpdateMessage"], keyof WsPeerUpdate>]: never; }) | undefined;
        challengeMessage?: ({
            challengeToSign?: string | undefined;
            alreadyConnected?: boolean | undefined;
        } & {
            challengeToSign?: string | undefined;
            alreadyConnected?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["challengeMessage"], keyof WsChallengeRequired>]: never; }) | undefined;
        signedChallengeForServer?: ({
            authChainJson?: string | undefined;
        } & {
            authChainJson?: string | undefined;
        } & { [K_5 in Exclude<keyof I["signedChallengeForServer"], "authChainJson">]: never; }) | undefined;
        peerLeaveMessage?: ({
            alias?: number | undefined;
        } & {
            alias?: number | undefined;
        } & { [K_6 in Exclude<keyof I["peerLeaveMessage"], "alias">]: never; }) | undefined;
        peerIdentification?: ({
            address?: string | undefined;
        } & {
            address?: string | undefined;
        } & { [K_7 in Exclude<keyof I["peerIdentification"], "address">]: never; }) | undefined;
        peerKicked?: ({} & {} & { [K_8 in Exclude<keyof I["peerKicked"], never>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I, keyof WsPacket>]: never; }>(object: I): WsPacket;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
