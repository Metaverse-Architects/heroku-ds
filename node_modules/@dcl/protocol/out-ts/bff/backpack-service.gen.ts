/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.bff";

export interface BackpackRequest {
  address: string;
}

export interface BackpackResponse {
  wearables: Wearable[];
  emotes: Emote[];
}

export interface Wearable {
  urn: string;
  amount: number;
}

export interface Emote {
  urn: string;
  amount: number;
}

function createBaseBackpackRequest(): BackpackRequest {
  return { address: "" };
}

export const BackpackRequest = {
  encode(message: BackpackRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BackpackRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackpackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BackpackRequest {
    return { address: isSet(object.address) ? String(object.address) : "" };
  },

  toJSON(message: BackpackRequest): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<BackpackRequest>, I>>(object: I): BackpackRequest {
    const message = createBaseBackpackRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseBackpackResponse(): BackpackResponse {
  return { wearables: [], emotes: [] };
}

export const BackpackResponse = {
  encode(message: BackpackResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.wearables) {
      Wearable.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.emotes) {
      Emote.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BackpackResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackpackResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.wearables.push(Wearable.decode(reader, reader.uint32()));
          break;
        case 2:
          message.emotes.push(Emote.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BackpackResponse {
    return {
      wearables: Array.isArray(object?.wearables) ? object.wearables.map((e: any) => Wearable.fromJSON(e)) : [],
      emotes: Array.isArray(object?.emotes) ? object.emotes.map((e: any) => Emote.fromJSON(e)) : [],
    };
  },

  toJSON(message: BackpackResponse): unknown {
    const obj: any = {};
    if (message.wearables) {
      obj.wearables = message.wearables.map((e) => e ? Wearable.toJSON(e) : undefined);
    } else {
      obj.wearables = [];
    }
    if (message.emotes) {
      obj.emotes = message.emotes.map((e) => e ? Emote.toJSON(e) : undefined);
    } else {
      obj.emotes = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<BackpackResponse>, I>>(object: I): BackpackResponse {
    const message = createBaseBackpackResponse();
    message.wearables = object.wearables?.map((e) => Wearable.fromPartial(e)) || [];
    message.emotes = object.emotes?.map((e) => Emote.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWearable(): Wearable {
  return { urn: "", amount: 0 };
}

export const Wearable = {
  encode(message: Wearable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.urn !== "") {
      writer.uint32(10).string(message.urn);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint32(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Wearable {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWearable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.urn = reader.string();
          break;
        case 2:
          message.amount = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Wearable {
    return {
      urn: isSet(object.urn) ? String(object.urn) : "",
      amount: isSet(object.amount) ? Number(object.amount) : 0,
    };
  },

  toJSON(message: Wearable): unknown {
    const obj: any = {};
    message.urn !== undefined && (obj.urn = message.urn);
    message.amount !== undefined && (obj.amount = Math.round(message.amount));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Wearable>, I>>(object: I): Wearable {
    const message = createBaseWearable();
    message.urn = object.urn ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEmote(): Emote {
  return { urn: "", amount: 0 };
}

export const Emote = {
  encode(message: Emote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.urn !== "") {
      writer.uint32(10).string(message.urn);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint32(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Emote {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.urn = reader.string();
          break;
        case 2:
          message.amount = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Emote {
    return {
      urn: isSet(object.urn) ? String(object.urn) : "",
      amount: isSet(object.amount) ? Number(object.amount) : 0,
    };
  },

  toJSON(message: Emote): unknown {
    const obj: any = {};
    message.urn !== undefined && (obj.urn = message.urn);
    message.amount !== undefined && (obj.amount = Math.round(message.amount));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Emote>, I>>(object: I): Emote {
    const message = createBaseEmote();
    message.urn = object.urn ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

export type BackpackServiceDefinition = typeof BackpackServiceDefinition;
export const BackpackServiceDefinition = {
  name: "BackpackService",
  fullName: "decentraland.bff.BackpackService",
  methods: {
    getBackpack: {
      name: "GetBackpack",
      requestType: BackpackRequest,
      requestStream: false,
      responseType: BackpackResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
